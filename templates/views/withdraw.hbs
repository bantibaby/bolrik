<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Withdraw Money</title>
    <link rel="stylesheet" href="/css/withdraw.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    {{>headlinks}}
</head>
<body>
{{>navbar}}
    <div class="container">
        <h2>Withdraw Money</h2>
        <!-- Welcome Bonus Section for New Users (Only bonus info, no progress bars or limits) -->
        {{#if user.welcomeBonus}}
            {{#if user.welcomeBonus.amount}}
            <div class="welcome-bonus-section">
                <h3>वेलकम बोनस स्टेटस</h3>
                <p><strong>वेलकम बोनस:</strong> ₹<span id="welcome-bonus-amount">{{user.welcomeBonus.amount}}</span></p>
                {{#if user.welcomeBonus.unlocked}}
                    <p class="success-text">आपका वेलकम बोनस पूरी तरह से अनलॉक हो गया है!</p>
                    {{#if user.welcomeBonus.hasDeposited}}
                        <p class="success-text">आपने डिपॉजिट कर लिया है, आप अब निर्धारित लिमिट के अनुसार विद्ड्रॉ कर सकते हैं।</p>
                    {{else}}
                        {{#if user.welcomeBonus.initialBalanceUsed}}
                            {{#if (lessThan user.welcomeBonus.totalBetsPlaced 20)}}
                                <p class="warning-text">विनिंग अमाउंट को विथड्रॉ करने के लिए आपको कम से कम 20 बेट्स प्लेस करनी होंगी। आपने अभी तक <span class="highlight">{{user.welcomeBonus.totalBetsPlaced}}</span> बेट्स प्लेस की हैं।</p>
                                <p class="note-text">आप अभी केवल वेलकम बोनस राशि विथड्रॉ कर सकते हैं।</p>
                            {{else}}
                                <p class="success-text">आपने 20 बेट्स पूरी कर ली हैं!</p>
                                {{#if user.welcomeBonus.lastWinningWithdrawalDate}}
                                    <div class="countdown-container">
                                        <p class="note-text">अगला विथड्रॉ उपलब्ध होगा:</p>
                                        <div class="countdown" id="withdrawal-countdown">
                                            <span id="countdown-days">0</span>दिन
                                            <span id="countdown-hours">0</span>घंटे
                                            <span id="countdown-minutes">0</span>मिनट
                                            <span id="countdown-seconds">0</span>सेकंड
                                        </div>
                                    </div>
                                {{/if}}
                                <p class="info-text">
                                    विनिंग अमाउंट से आप सप्ताह में एक बार ₹149 तक विथड्रॉ कर सकते हैं।
                                    {{#if (greaterThan (subtract user.welcomeBonus.amount user.welcomeBonus.totalWithdrawnFromBonus) 0)}}
                                        <br>आप अपना बचा हुआ वेलकम बोनस (₹{{subtract user.welcomeBonus.amount user.welcomeBonus.totalWithdrawnFromBonus}}) भी विनिंग अमाउंट के साथ विथड्रॉ कर सकते हैं।
                                    {{/if}}
                                </p>
                            {{/if}}
                        {{else}}
                            <p class="success-text">आप वेलकम बोनस राशि विद्ड्रॉ कर सकते हैं।</p>
                        {{/if}}
                    {{/if}}
                {{else}}
                    <p><strong>अनलॉक स्टेटस:</strong> <span id="betting-progress">{{user.welcomeBonus.bettingProgress}}</span>/100 ₹</p>
                    <p class="info-text">
                        वेलकम बोनस का 30% (₹<span id="available-bonus">{{calculateAvailableBonus user.welcomeBonus.amount}}</span>) विद्ड्रॉ के लिए उपलब्ध है।<br>
                        शेष 70% (₹<span id="locked-bonus">{{calculateLockedBonus user.welcomeBonus.amount}}</span>) अनलॉक करने के लिए ₹100 तक की बेट प्लेस करें।
                    </p>
                {{/if}}
            </div>
            {{else}}
            <div class="welcome-bonus-section old-user">
                <h3>वेलकम बोनस स्टेटस</h3>
                <p class="info-text">आप एक पुराने वफादार ग्राहक हैं। वेलकम बोनस केवल नए ग्राहकों के लिए उपलब्ध है।</p>
            </div>
            {{/if}}
        {{/if}}
        <p><strong>Available Balance:</strong> ₹<span id="available-balance">{{#if user.welcomeBonus}}{{#if user.welcomeBonus.unlocked}}{{user.balance.[0].pending}}{{else}}{{subtract user.balance.[0].pending (calculateLockedBonus user.welcomeBonus.amount)}}{{/if}}{{else}}{{user.balance.[0].pending}}{{/if}}</span></p>
        <p class="total-balance"><strong>Total Balance:</strong> ₹<span id="total-balance">{{user.balance.[0].pending}}</span></p>
        <!-- Add Payment Method Modal -->
        <div id="add-payment-modal" class="modal" style="display:none;">
          <div class="modal-content">
            <span class="modal-close">&times;</span>
            <h4>Add Payment Method</h4>
            <form id="add-payment-form">
              <div class="form-group">
                <label>Bank Name</label>
                <input type="text" id="modal-bankName" name="bankName">
                                        </div>
              <div class="form-group">
                <label>Account Number</label>
                <input type="text" id="modal-accountNumber" name="accountNumber">
                                                        </div>
              <div class="form-group">
                <label>IFSC Code</label>
                <input type="text" id="modal-ifsc" name="ifsc">
                                                            </div>
              <div class="form-group">
                <label>UPI ID</label>
                <input type="text" id="modal-upiId" name="upiId">
                                                            </div>
              <button type="submit">Save</button>
              <button type="button" id="close-payment-modal">Cancel</button>
            </form>
                                                        </div>
                                                    </div>
        <!-- Payment Method Section -->
        <div id="payment-method-section">
            <h3>Select Payment Method</h3>
            <div class="payment-methods">
                {{#if user.banking.bankName}}
                <div class="payment-method-option">
                    <input type="radio" id="bank" name="selectedPaymentMethod" value="bank">
                    <label for="bank">
                        <span class="payment-icon"><i class="fas fa-university"></i></span>
                        <span class="payment-name">Bank Transfer</span>
                        <span class="payment-details">{{user.banking.bankName}} - {{user.banking.accountNumber}}</span>
                    </label>
                </div>
                {{/if}}
                
                {{#if user.banking.upiId}}
                <div class="payment-method-option">
                    <input type="radio" id="upi" name="selectedPaymentMethod" value="upi">
                    <label for="upi">
                        <span class="payment-icon"><i class="fas fa-mobile-alt"></i></span>
                        <span class="payment-name">UPI</span>
                        <span class="payment-details">{{user.banking.upiId}}</span>
                    </label>
                </div>
                {{/if}}
                
                {{#if user.banking.paytmNumber}}
                <div class="payment-method-option">
                    <input type="radio" id="paytm" name="selectedPaymentMethod" value="paytm">
                    <label for="paytm">
                        <span class="payment-icon"><i class="fas fa-wallet"></i></span>
                        <span class="payment-name">Paytm</span>
                        <span class="payment-details">{{user.banking.paytmNumber}}</span>
                    </label>
                </div>
                {{/if}}
                
                {{#unless user.banking}}
                <div class="no-payment-methods">
                    <p>No payment methods found. Please add a payment method in your profile.</p>
                    <a href="/user/account" class="btn">Add Payment Method</a>
                </div>
                {{/unless}}
            </div>
        </div>
        <form id="withdraw-form">
            <div class="ammount-group-with">
                <label for="amount">Enter Withdrawal Amount:</label>
                <input type="number" id="amount" name="amount" placeholder="Enter amount" required>
            </div>
            <p class="error" id="error-message">Insufficient Balance</p>
            <p class="success" id="success-message">Withdrawal Request Submitted Successfully!</p>
            <button type="submit" id="withdraw-btn2" disabled>Withdraw</button>
        </form>
        <!-- ✅ Withdrawal History Table -->
        <h3>Withdrawal History</h3>
        <table id="withdraw-history">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                {{#each user.banking.withdrawals}}
                <tr>
                    <td>{{this.date}}</td>
                    <td>₹{{this.amount}}</td>
                    <td id="status-{{@index}}" class="status-{{lowercase this.status}}">{{this.status}}</td>
                    <td>
                        {{#if (eq this.status "Pending")}}
                        <button class="remove-btn" data-id="{{@index}}" onclick="confirmCancelWithdraw('{{@index}}', {{this.amount}})">
                            <i class="fas fa-times"></i>
                        </button>
                        {{else}}
                        <span class="action-disabled">-</span>
                        {{/if}}
                    </td>
                </tr>
                {{else}}
                <tr>
                    <td colspan="4">No withdrawal history found.</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
        <!-- Confirmation Modal for Withdrawal Cancellation -->
        <div id="cancel-withdraw-modal" class="modal">
            <div class="modal-content">
                <h4>Confirm Cancellation</h4>
                <p>क्या आप इस विथड्रॉ रिक्वेस्ट को कैंसल करना चाहते हैं?</p>
                <div class="modal-buttons">
                    <button id="confirm-cancel" class="yes-btn">हां</button>
                    <button id="cancel-action" class="no-btn">नहीं</button>
                </div>
            </div>
        </div>
    </div>
    {{>footer}}
    <style>
        /* केवल withdraw, बोनस, हिस्ट्री, पेमेंट मेथड के लिए जरूरी CSS रखें */
        
        /* Payment Method Styles */
        #payment-method-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ffcc22;
            border-radius: 8px;
            background-color: #1a1a1a;
        }
        
        #payment-method-section h3 {
            color: #ffcc22;
            margin-top: 0;
            font-size: 1.2rem;
            text-align: center;
            border-bottom: 1px solid #2f2f2f;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        
        .payment-methods {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .payment-method-option {
            position: relative;
            cursor: pointer;
        }
        
        .payment-method-option input[type="radio"] {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .payment-method-option label {
            display: flex;
            align-items: center;
            padding: 12px;
            border: 1px solid #2f2f2f;
            border-radius: 6px;
            transition: all 0.3s ease;
            background-color: #252525;
            cursor: pointer;
        }
        
        .payment-method-option input[type="radio"]:checked + label {
            border-color: #ffcc22;
            background-color: #333;
            box-shadow: 0 0 5px rgba(255, 204, 34, 0.3);
        }
        
        .payment-icon {
            font-size: 20px;
            margin-right: 15px;
            color: #ffcc22;
            width: 30px;
            text-align: center;
        }
        
        .payment-name {
            font-weight: bold;
            margin-right: 10px;
            color: #fff;
        }
        
        .payment-details {
            color: #aaa;
            font-size: 0.9em;
            margin-left: auto;
        }
        
        .no-payment-methods {
            text-align: center;
            padding: 15px;
            background-color: #252525;
            border-radius: 6px;
        }
        
        .no-payment-methods p {
            margin-bottom: 15px;
            color: #aaa;
        }
        
        .no-payment-methods .btn {
            background-color: #ffcc22;
            color: #000;
            padding: 8px 16px;
            border-radius: 4px;
            text-decoration: none;
            font-weight: bold;
            display: inline-block;
        }
        
        /* Payment History Styles */
        .payment-history-container {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #3e3e3e;
            border-radius: 8px;
            background-color: #1a1a1a;
        }
        
        .payment-history-container h3 {
            color: #aaa;
            margin-top: 0;
            font-size: 1.2rem;
            text-align: center;
            border-bottom: 1px solid #2f2f2f;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        
        .payment-history-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .payment-history-item {
            padding: 12px;
            border: 1px solid #2f2f2f;
            border-radius: 6px;
            background-color: #252525;
        }
        
        .payment-history-type {
            font-weight: bold;
            color: #ffcc22;
            margin-bottom: 5px;
            text-transform: uppercase;
            font-size: 0.9em;
        }
        
        .payment-history-details {
            color: #ddd;
            margin-bottom: 5px;
        }
        
        .payment-history-date {
            color: #888;
            font-size: 0.8em;
            text-align: right;
        }
        
        .no-history {
            text-align: center;
            padding: 15px;
            color: #888;
        }
        .welcome-bonus-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ffcc22;
            border-radius: 8px;
            background-color: #1a1a1a;
            box-shadow: 0 0 5px rgba(255, 204, 34, 0.3);
        }
        .welcome-bonus-section.old-user {
            border-color: #888;
            box-shadow: 0 0 5px rgba(136, 136, 136, 0.3);
        }
        .welcome-bonus-section.old-user h3 {
            color: #888;
        }
        .welcome-bonus-section h3 {
            color: #ffcc22;
            margin-top: 0;
            font-size: 1.2rem;
            text-align: center;
            border-bottom: 1px solid #2f2f2f;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .success-text {
            color: #32CD32;
            font-weight: bold;
            text-align: center;
            font-size: 1em;
            padding: 8px;
            background-color: rgba(50, 205, 50, 0.1);
            border-radius: 6px;
            margin: 10px 0;
            border: 1px solid #2f2f2f;
        }
        .warning-text {
            color: #ff9800;
            font-weight: bold;
            text-align: center;
            font-size: 1em;
            padding: 8px;
            background-color: rgba(255, 152, 0, 0.1);
            border-radius: 6px;
            margin: 10px 0;
            border: 1px solid #2f2f2f;
        }
        .info-text {
            color: #B3B3B3;
            font-size: 0.9em;
            margin-top: 12px;
            background-color: #252525;
            padding: 10px;
            border-left: 2px solid #ffcc22;
            border-radius: 0 6px 6px 0;
        }
        .note-text {
            color: #aaaaaa;
            font-size: 0.85em;
            margin-top: 8px;
            font-style: italic;
            background-color: #1f1f1f;
            padding: 8px;
            border-radius: 4px;
            text-align: center;
        }
        .highlight {
            color: #ff9800;
            font-weight: bold;
        }
        #welcome-bonus-amount, #available-bonus, #locked-bonus, #betting-progress {
            font-weight: bold;
            color: #ffcc22;
        }
        .welcome-bonus-section p {
            margin: 8px 0;
            color: #FFFFFF;
        }
        .total-balance {
            color: #888;
            font-size: 0.9em;
        }
        .countdown-container {
            background-color: #252525;
            padding: 10px;
            border-radius: 8px;
            margin: 15px 0;
            text-align: center;
            border: 1px solid #3e3e3e;
        }
        .countdown {
            display: flex;
            justify-content: space-around;
            margin: 10px 0;
            font-size: 0.9em;
        }
        .countdown span {
            background-color: #1a1a1a;
            color: #ffcc22;
            font-size: 1.2em;
            font-weight: bold;
            padding: 5px 8px;
            border-radius: 4px;
            margin: 0 2px;
            min-width: 30px;
            display: inline-block;
        }
        .remove-btn {
            background-color: #F44336;
            color: white;
            border: none;
            border-radius: 4px;
            width: 24px;
            height: 24px;
            cursor: pointer;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s;
        }
        .remove-btn:hover {
            background-color: #D32F2F;
        }
        .action-disabled {
            color: #666;
            font-size: 1.2em;
        }
        .status-approved {
            color: #4CAF50;
            font-weight: bold;
        }
        .status-pending {
            color: #FFC107;
            font-weight: bold;
        }
        .status-rejected {
            color: #F44336;
            font-weight: bold;
        }
        .status-paid {
            color: #2196F3;
            font-weight: bold;
        }
        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #252525;
            padding: 20px;
            border-radius: 8px;
            max-width: 400px;
            width: 90%;
            text-align: center;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            animation: modalFadeIn 0.3s;
        }
        @keyframes modalFadeIn {
            from {opacity: 0; transform: translateY(-20px);}
            to {opacity: 1; transform: translateY(0);}
        }
        .modal h4 {
            color: #fff;
            margin-top: 0;
        }
        .modal p {
            color: #ddd;
            margin-bottom: 20px;
        }
        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }
        .yes-btn, .no-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            min-width: 80px;
        }
        .yes-btn {
            background-color: #F44336;
            color: white;
        }
        .no-btn {
            background-color: #607D8B;
            color: white;
        }
        .yes-btn:hover {
            background-color: #D32F2F;
        }
        .no-btn:hover {
            background-color: #455A64;
        }
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
                /* Payment Method Modal & Section Styling */
                #add-payment-modal {
                  display: none;
                  position: fixed;
                  z-index: 1100;
                  left: 0;
                  top: 0;
                  width: 100vw;
                  height: 100vh;
                  background: rgba(0,0,0,0.7);
                  align-items: center;
                  justify-content: center;
                }
                #add-payment-modal .modal-content {
                  background: #232323;
                  color: #fff;
                  border-radius: 10px;
                  padding: 30px 25px 20px 25px;
                  max-width: 400px;
                  width: 90vw;
                  box-shadow: 0 0 20px rgba(0,0,0,0.4);
                  text-align: left;
                  position: relative;
                }
                #add-payment-modal h4 {
                  color: #ffcc22;
                  margin-bottom: 18px;
                  text-align: center;
                }
                #add-payment-form .form-group {
                  margin-bottom: 15px;
                }
                #add-payment-form label {
                  color: #ffcc22;
                  font-size: 1em;
                  margin-bottom: 4px;
                  display: block;
                }
                #add-payment-form input[type="text"] {
                  width: 100%;
                  padding: 8px 10px;
                  border-radius: 5px;
                  border: 1px solid #444;
                  background: #181818;
                  color: #fff;
                  font-size: 1em;
                  margin-top: 2px;
                }
                #add-payment-form button[type="submit"] {
                  background: #4CAF50;
                  color: #fff;
                  border: none;
                  padding: 8px 18px;
                  border-radius: 5px;
                  font-weight: bold;
                  margin-right: 10px;
                  cursor: pointer;
                  transition: background 0.2s;
                }
                #add-payment-form button[type="submit"]:hover {
                  background: #388e3c;
                }
                #add-payment-form button[type="button"] {
                  background: #607D8B;
                  color: #fff;
                  border: none;
                  padding: 8px 18px;
                  border-radius: 5px;
                  font-weight: bold;
                  cursor: pointer;
                  transition: background 0.2s;
                }
                #add-payment-form button[type="button"]:hover {
                  background: #455A64;
                }
                #payment-method-section {
                  margin: 18px 0 18px 0;
                  padding: 15px 18px;
                  background: #181818;
                  border-radius: 8px;
                  border: 1px solid #333;
                  box-shadow: 0 0 6px rgba(255,204,34,0.08);
                  display: flex;
                  flex-direction: column;
                  align-items: flex-start;
                  min-height: 60px;
                }
                #payment-method-section.center-btn {
                  align-items: center;
                  justify-content: center;
                }
                #payment-method-section label {
                  color: #ffcc22;
                  font-weight: bold;
                  margin-bottom: 7px;
                }
                #payment-method-select {
                  width: 100%;
                  padding: 8px 10px;
                  border-radius: 5px;
                  border: 1px solid #444;
                  background: #232323;
                  color: #fff;
                  font-size: 1em;
                  margin-bottom: 5px;
                }
                #payment-method-section button {
                  background: #ffcc22;
                  color: #181818;
                  border: none;
                  padding: 8px 18px;
                  border-radius: 5px;
                  font-weight: bold;
                  cursor: pointer;
                  margin-top: 5px;
                  transition: background 0.2s;
                  font-size: 1.1em;
                  min-width: 200px;
                }
                #payment-method-section button:hover {
                  background: #ffe066;
        }
        .selected-payment-method {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #232323;
            border: 1px solid #444;
            border-radius: 5px;
            padding: 8px 15px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #ffcc22;
            font-weight: bold;
            width: 100%;
            box-sizing: border-box;
        }
        .selected-payment-method i {
            margin-right: 8px;
            font-size: 1.1em;
        }
        .change-payment-btn {
            background-color: #607D8B;
            color: white;
            border: none;
            padding: 8px 18px;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 10px;
            transition: background 0.2s;
            font-size: 1em;
            min-width: 200px;
        }
        .change-payment-btn:hover {
            background-color: #455A64;
        }
        /* Loading indicator styles */
        .loading-indicator {
            background-color: #1a1a1a;
            border: 1px solid #ffcc22;
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            box-shadow: 0 0 10px rgba(255, 204, 34, 0.2);
        }
        
        .loading-indicator p {
            color: #ffcc22;
            margin-top: 15px;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .loading-spinner {
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid rgba(255, 204, 34, 0.3);
            border-radius: 50%;
            border-top-color: #ffcc22;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Message styles */
        #error-message, #success-message {
            padding: 12px;
            border-radius: 6px;
            margin: 10px 0;
            font-weight: bold;
            text-align: center;
            transition: opacity 0.3s ease;
        }
        
        #error-message {
            background-color: rgba(244, 67, 54, 0.1);
            border: 1px solid #F44336;
            color: #F44336;
        }
        
        #success-message {
            background-color: rgba(76, 175, 80, 0.1);
            border: 1px solid #4CAF50;
            color: #4CAF50;
        }
    </style>
    <script>
        // Safe implementation for fetchWithdrawalLimitsAndUpdateUI
        // This prevents the TypeError shown in the console
        window.fetchWithdrawalLimitsAndUpdateUI = function() {
            try {
                console.log("Withdrawal limits fetch requested");
                // If this function is expected to update UI elements,
                // implement it safely here with proper null checks
                
                // Example implementation (modify as needed):
                const xhr = new XMLHttpRequest();
                xhr.open("GET", "/user/withdraw/limits", true);
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                            try {
                                const data = JSON.parse(xhr.responseText);
                                console.log("Withdrawal limits data:", data);
                                
                                // Safely update UI elements if they exist
                                // For example:
                                const limitElement = document.getElementById("withdrawal-limit");
                                if (limitElement && data.limit) {
                                    limitElement.innerText = data.limit;
                                }
                                
                                const countElement = document.getElementById("withdrawal-count");
                                if (countElement && data.count !== undefined) {
                                    countElement.innerText = data.count;
                                }
                            } catch (parseError) {
                                console.error("Error parsing withdrawal limits:", parseError);
                            }
                        } else {
                            console.log("Failed to fetch withdrawal limits:", xhr.status);
                        }
                    }
                };
                xhr.onerror = function() {
                    console.error("Network error while fetching withdrawal limits");
                };
                xhr.send();
            } catch (error) {
                console.error("Error in fetchWithdrawalLimitsAndUpdateUI:", error);
            }
        };
        
        // Client-side helper functions (needed for DOM manipulation)
        function calculateAvailableBonus(bonusAmount) {
            return Math.floor((bonusAmount || 0) * 0.3);
        }
        function calculateLockedBonus(bonusAmount) {
            return Math.ceil((bonusAmount || 0) * 0.7);
        }
        function subtract(a, b) {
            return a - b;
        }
        function lessThan(a, b) {
            return a < b;
        }
        function eq(a, b) {
            return a === b;
        }
        // ✅ Withdrawal cancel confirmation
        let selectedWithdrawId = null;
        let selectedWithdrawAmount = 0;
        function confirmCancelWithdraw(withdrawId, amount) {
            selectedWithdrawId = withdrawId;
            selectedWithdrawAmount = amount;
            // Show modal
            const modal = document.getElementById('cancel-withdraw-modal');
            if (modal) {
            modal.style.display = 'flex';
        }
        }
        // ✅ Cancel withdraw request
        async function cancelWithdrawRequest() {
            try {
                // Hide any existing error messages
                const errorMessage = document.getElementById("error-message");
                if (errorMessage) {
                    errorMessage.style.display = "none";
                }
                
                // Show loading on button
                const button = document.querySelector(`button[data-id="${selectedWithdrawId}"]`);
                if (!button) {
                    console.error("Cancel button not found");
                    return;
                }
                
                const originalContent = button.innerHTML;
                button.innerHTML = '<div class="loading-spinner"></div>';
                button.disabled = true;
                
                // Create a custom modal message element for cancel-specific messages
                const modalContent = document.querySelector('#cancel-withdraw-modal .modal-content');
                const modalMessage = document.createElement('p');
                modalMessage.className = 'modal-message';
                modalMessage.style.color = '#ff4444';
                modalMessage.style.display = 'none';
                modalMessage.style.marginTop = '10px';
                
                // Add the message element if it doesn't exist
                const existingMessage = modalContent.querySelector('.modal-message');
                if (!existingMessage && modalContent) {
                    modalContent.appendChild(modalMessage);
                }
                
                // Use fetch with proper error handling
                const response = await fetch(`/user/withdraw/cancel/${selectedWithdrawId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });
                
                // First check the response status
                if (!response.ok) {
                    // If response is not OK, try to get error message but don't assume JSON
                    let errorText = "विथड्रॉ कैंसल करने में त्रुटि हुई।";
                    
                    try {
                        const contentType = response.headers.get("content-type");
                        if (contentType && contentType.includes("application/json")) {
                            const errorData = await response.json();
                            errorText = errorData.message || errorText;
                        } else {
                            // If not JSON, just get the text
                            errorText = await response.text();
                            // Limit text length to avoid displaying entire HTML pages
                            errorText = errorText.substring(0, 50) + (errorText.length > 50 ? "..." : "");
                        }
                    } catch (parseError) {
                        console.error("Error parsing response:", parseError);
                    }
                    
                    // Show error in modal or alert
                    if (modalMessage) {
                        modalMessage.textContent = errorText;
                        modalMessage.style.display = 'block';
                    } else {
                        alert(errorText);
                    }
                    
                    // Reset button
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    return;
                }
                
                // Try to parse JSON response
                let result;
                try {
                    const contentType = response.headers.get("content-type");
                    if (contentType && contentType.includes("application/json")) {
                        result = await response.json();
                    } else {
                        throw new Error("Server returned non-JSON response");
                    }
                } catch (error) {
                    console.error("Error parsing JSON response:", error);
                    
                    // Show error in modal or alert
                    const errorText = "विथड्रॉ कैंसल करने में त्रुटि हुई। सर्वर से अवैध प्रतिक्रिया मिली।";
                    if (modalMessage) {
                        modalMessage.textContent = errorText;
                        modalMessage.style.display = 'block';
                    } else {
                        alert(errorText);
                    }
                    
                    // Reset button
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    return;
                }
                
                if (result.success) {
                    // Hide modal message if it exists
                    if (modalMessage) {
                        modalMessage.style.display = 'none';
                    }
                    
                    // Update balance
                    const availableBalanceEl = document.getElementById('available-balance');
                    const totalBalanceEl = document.getElementById('total-balance');
                    
                    if (availableBalanceEl && totalBalanceEl) {
                        const currentBalance = parseFloat(availableBalanceEl.innerText);
                        const totalBalance = parseFloat(totalBalanceEl.innerText);
                        
                        availableBalanceEl.innerText = (currentBalance + selectedWithdrawAmount).toFixed(2);
                        totalBalanceEl.innerText = (totalBalance + selectedWithdrawAmount).toFixed(2);
                    }
                    
                    // Remove row from table
                    const row = button.closest('tr');
                    if (row && row.parentNode) {
                    row.parentNode.removeChild(row);
                    
                    // If table is now empty, show message
                    const tbody = document.querySelector('#withdraw-history tbody');
                        if (tbody && tbody.children.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="4">कोई विथड्रॉल इतिहास नहीं मिला।</td></tr>';
                        }
                    }
                    
                    // Hide modal
                    const modal = document.getElementById('cancel-withdraw-modal');
                    if (modal) {
                        modal.style.display = 'none';
                    }
                } else {
                    // Show error message
                    const errorText = result.message || 'विथड्रॉ कैंसल करने में त्रुटि हुई।';
                    if (modalMessage) {
                        modalMessage.textContent = errorText;
                        modalMessage.style.display = 'block';
                    } else {
                        alert(errorText);
                    }
                    
                    // Reset button
                    button.innerHTML = originalContent;
                    button.disabled = false;
                }
            } catch (error) {
                console.error('Error canceling withdraw:', error);
                alert('विथड्रॉ कैंसल करने में त्रुटि हुई।');
                
                // Reset button if it exists
                const button = document.querySelector(`button[data-id="${selectedWithdrawId}"]`);
                if (button) {
                    button.innerHTML = '<i class="fas fa-times"></i>';
                    button.disabled = false;
                }
                
                // Don't hide modal on error, let user try again or close manually
            }
        }
        
        // When page loads, fetch user data and payment methods
        document.addEventListener('DOMContentLoaded', function() {
            // Get all important elements
            const errorMessage = document.getElementById("error-message");
            const successMessage = document.getElementById("success-message");
            const amountInput = document.getElementById("amount");
            const withdrawBtn = document.getElementById("withdraw-btn2");
            const paymentMethodSection = document.getElementById("payment-method-section");
            
            // Function to show message and hide the other one
            function showMessage(type, text) {
                if (!errorMessage || !successMessage) return;
                
                // First hide both messages to reset animations
                errorMessage.style.display = "none";
                successMessage.style.display = "none";
                
                // Small delay to ensure CSS animation triggers
                setTimeout(() => {
                    if (type === 'error') {
                        // Show error, hide success
                        errorMessage.textContent = text;
                        errorMessage.style.display = "block";
                        // Force reflow to trigger animation
                        errorMessage.offsetHeight;
                        successMessage.style.display = "none";
                    } else if (type === 'success') {
                        // Show success, hide error
                        successMessage.textContent = text;
                        successMessage.style.display = "block";
                        // Force reflow to trigger animation
                        successMessage.offsetHeight;
                        errorMessage.style.display = "none";
                    } else {
                        // Hide both
                        errorMessage.style.display = "none";
                        successMessage.style.display = "none";
                    }
                }, 10);
            }

            // Function to show message with auto-hide after specified time
            function showTimedMessage(type, text, duration = 2000) {
                showMessage(type, text);
                
                // Only auto-hide if duration is provided and greater than 0
                if (duration > 0) {
                    // Set timeout to hide the message after duration
                    setTimeout(() => {
                        // Only hide if it's still showing the same message
                        const messageElement = (type === 'error') ? errorMessage : successMessage;
                        if (messageElement && messageElement.textContent === text) {
                            showMessage('none');
                        }
                    }, duration);
                }
            }
            
            // Hide all messages on page load
            showMessage('none');
            
            // Initialize form elements
            if (!amountInput || !withdrawBtn) {
                console.error("Required form elements not found");
                return;
            }
            
            // Make sure withdraw button is initially disabled
            withdrawBtn.disabled = true;
            
            // Initialize payment method section
            if (paymentMethodSection) {
                // Make sure it has the correct display style
                paymentMethodSection.style.display = "flex";
            }
            
            const availableBalance = document.getElementById("available-balance") ? 
                parseFloat(document.getElementById("available-balance").innerText) : 0;
            
            // Get welcome bonus details from the page
            const welcomeBonusAmount = {{#if user.welcomeBonus}}{{user.welcomeBonus.amount}}{{else}}0{{/if}};
            const isBonusUnlocked = {{#if user.welcomeBonus}}{{user.welcomeBonus.unlocked}}{{else}}false{{/if}};
            const totalBetsPlaced = {{#if user.welcomeBonus}}{{user.welcomeBonus.totalBetsPlaced}}{{else}}0{{/if}};
            const hasDeposited = {{#if user.welcomeBonus}}{{user.welcomeBonus.hasDeposited}}{{else}}false{{/if}};
            const pendingWithdrawals = {{#if user.welcomeBonus}}{{user.welcomeBonus.pendingWithdrawalsFromBonus}}{{else}}0{{/if}};
            const lastWinningWithdrawalDate = {{#if user.welcomeBonus.lastWinningWithdrawalDate}}'{{user.welcomeBonus.lastWinningWithdrawalDate}}'{{else}}null{{/if}};

            // Function to calculate remaining time until next withdrawal
            function calculateTimeUntilNextWithdrawal(lastWithdrawalDate) {
                if (!lastWithdrawalDate) return null;
                const lastWithdrawal = new Date(lastWithdrawalDate);
                const now = new Date();
                const nextWithdrawalDate = new Date(lastWithdrawal);
                nextWithdrawalDate.setDate(nextWithdrawalDate.getDate() + 7);
                const timeDiff = nextWithdrawalDate - now;
                if (timeDiff <= 0) return null;
                const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
                const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
                return { days, hours, minutes, seconds };
            }
            // Update countdown timer
            function updateCountdown() {
                if (!lastWinningWithdrawalDate) return;
                const timeLeft = calculateTimeUntilNextWithdrawal(lastWinningWithdrawalDate);
                if (!timeLeft) return;
                const countdownElement = document.getElementById('withdrawal-countdown');
                if (countdownElement) {
                    document.getElementById('countdown-days').textContent = timeLeft.days;
                    document.getElementById('countdown-hours').textContent = timeLeft.hours;
                    document.getElementById('countdown-minutes').textContent = timeLeft.minutes;
                    document.getElementById('countdown-seconds').textContent = timeLeft.seconds;
                }
            }
            // Start countdown timer if last withdrawal date exists
            if (lastWinningWithdrawalDate) {
                updateCountdown();
                setInterval(updateCountdown, 1000);
            }
            async function validateWithdrawal(amount) {
                // Clear previous messages
                showMessage('none');
                
                // Basic amount validation
                if (!amount || isNaN(amount) || amount <= 0) {
                    showTimedMessage('error', "कृपया सही राशि दर्ज करें");
                    return false;
                }

                // Get available balance
                const availableBalanceEl = document.getElementById("available-balance");
                if (!availableBalanceEl) return false;
                
                const availableBalance = parseFloat(availableBalanceEl.innerText);
                
                // Check if amount exceeds balance
                if (amount > availableBalance) {
                    showTimedMessage('error', "अपर्याप्त बैलेंस");
                    return false;
                }
                
                // Get welcome bonus details
                const welcomeBonusAmount = {{#if user.welcomeBonus}}{{user.welcomeBonus.amount}}{{else}}0{{/if}};
                const isBonusUnlocked = {{#if user.welcomeBonus}}{{user.welcomeBonus.unlocked}}{{else}}false{{/if}};
                const totalBetsPlaced = {{#if user.welcomeBonus}}{{user.welcomeBonus.totalBetsPlaced}}{{else}}0{{/if}};
                const hasDeposited = {{#if user.welcomeBonus}}{{user.welcomeBonus.hasDeposited}}{{else}}false{{/if}};
                const pendingWithdrawals = {{#if user.welcomeBonus}}{{user.welcomeBonus.pendingWithdrawalsFromBonus}}{{else}}0{{/if}};

                // Welcome bonus validation logic
                if (welcomeBonusAmount > 0 && !hasDeposited) {
                    // Case 1: Before bonus unlock (30% withdrawal)
                    if (!isBonusUnlocked) {
                        const thirtyPercentBonus = Math.floor(welcomeBonusAmount * 0.3);
                        const availableForWithdraw = thirtyPercentBonus - pendingWithdrawals;
                        
                        if (amount < 1) {
                            showTimedMessage('error', "न्यूनतम विथड्रॉ राशि 1 INR है");
                            return false;
                        }

                        if (amount > availableForWithdraw) {
                            showTimedMessage('error', `आप केवल ₹${availableForWithdraw} तक ही विथड्रॉ कर सकते हैं। आपके पास ₹${pendingWithdrawals} की पेंडिंग विथड्रॉ रिक्वेस्ट हैं।`);
                            return false;
                        }
                    }
                    // Case 2: After bonus unlock but before 20 bets
                    else if (isBonusUnlocked && totalBetsPlaced < 20) {
                        const availableForWithdraw = welcomeBonusAmount - pendingWithdrawals;
                        
                        if (amount < 1) {
                            showTimedMessage('error', "न्यूनतम विथड्रॉ राशि 1 INR है");
                            return false;
                        }

                        if (amount > availableForWithdraw) {
                            showTimedMessage('error', `आप केवल ₹${availableForWithdraw} तक ही विथड्रॉ कर सकते हैं। आपके पास ₹${pendingWithdrawals} की पेंडिंग विथड्रॉ रिक्वेस्ट हैं।`);
                            return false;
                        }
                    }
                }

                // ALWAYS check payment method selection, regardless of how many methods the user has
                const paymentSelect = document.getElementById("payment-method-select");
                if (!paymentSelect || !paymentSelect.value) {
                    showTimedMessage('error', "कृपया payment method select करें।");
                    return false;
                }
                
                // All validations passed
                return true;
            }
            // Handle amount input changes
            amountInput.addEventListener("input", async function() {
                const amount = parseFloat(this.value);
                withdrawBtn.disabled = !(await validateWithdrawal(amount));
                if (!withdrawBtn.disabled) {
                    showMessage('none');
                }
            });
            // Handle form submission
            document.getElementById("withdraw-form").addEventListener("submit", async function(e) {
                e.preventDefault();
                const amount = parseFloat(amountInput.value);
                const submitButton = document.getElementById("withdraw-btn2");
                if (!(await validateWithdrawal(amount))) {
                    return;
                }
                try {
                    // Disable button and show loading state
                    submitButton.disabled = true;
                    submitButton.innerHTML = 'Processing...';
                    const response = await fetch("/user/withdraw", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        },
                        body: JSON.stringify({ amount: Math.floor(amount) })
                    });
                    const result = await response.json();
                    if (response.ok) {
                        showMessage('success', result.message);
                        showMessage('none');
                        document.getElementById("available-balance").innerText = result.newBalance;
                        amountInput.value = "";
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    } else {
                        showMessage('error', result.message || "विथड्रॉ रिक्वेस्ट प्रोसेस करने में त्रुटि हुई");
                        showMessage('none');
                        submitButton.disabled = false;
                        submitButton.innerHTML = 'Withdraw';
                    }
                } catch (error) {
                    showMessage('error', "विथड्रॉ रिक्वेस्ट प्रोसेस करने में त्रुटि हुई");
                    showMessage('none');
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'Withdraw';
                }
            });
            // Fetch user data including welcome bonus status
            async function fetchUserData() {
                try {
                    const response = await fetch("/user/getCurrentUser");
                    const data = await response.json();
                    if (data.success) {
                        const user = data;
                        // ✅ Check for pending deposits
                        let hasPendingDeposit = false;
                        if (user.bankDetails && user.bankDetails.deposits) {
                            user.bankDetails.deposits.forEach(deposit => {
                                if (deposit.status === "Pending") {
                                    hasPendingDeposit = true;
                                }
                            });
                        }
                        // Disable withdraw button if pending deposit exists
                        if (hasPendingDeposit) {
                            withdrawBtn.disabled = true;
                            showMessage('error', "आपका डिपॉजिट अभी पेंडिंग है। कृपया अप्रूवल होने तक इंतज़ार करें।");
                            showMessage('none');
                        }
                    }
                } catch (error) {
                    console.error("Error fetching user data:", error);
                }
            }
            // ✅ Fetch & Update Withdrawal History
            async function loadWithdrawalHistory() {
                try {
                    const response = await fetch("/user/withdraw/history");
                    const data = await response.json();
                    const historyTable = document.querySelector("#withdraw-history tbody");
                    historyTable.innerHTML = ""; // Clear Table
                    if (!data.withdrawals || data.withdrawals.length === 0) {
                        historyTable.innerHTML = "<tr><td colspan='4'>कोई विथड्रॉल इतिहास नहीं मिला।</td></tr>";
                        return;
                    }
                    data.withdrawals.forEach((withdrawal, index) => {
                        const row = document.createElement("tr");
                        // Status color class
                        const statusClass = `status-${withdrawal.status.toLowerCase()}`;
                        // Action column content
                        let actionContent = '<span class="action-disabled">-</span>';
                        if (withdrawal.status === "Pending") {
                            actionContent = `<button class="remove-btn" data-id="${index}" onclick="confirmCancelWithdraw('${index}', ${withdrawal.amount})">
                                <i class="fas fa-times"></i>
                            </button>`;
                        }
                        row.innerHTML = `
                            <td>${new Date(withdrawal.date).toLocaleDateString()}</td>
                            <td>₹${withdrawal.amount}</td>
                            <td id="status-${index}" class="${statusClass}">${withdrawal.status}</td>
                            <td>${actionContent}</td>
                        `;
                        historyTable.appendChild(row);
                    });
                } catch (error) {
                    console.error("Error fetching withdrawal history:", error);
                }
            }
            // हर 30 सेकंड में यूजर डाटा और विथड्रॉल स्टेटस अपडेट करें
            fetchUserData();
            loadWithdrawalHistory();
            setInterval(fetchUserData, 30000);
            setInterval(loadWithdrawalHistory, 30000);
            // Payment method UI logic
            async function renderPaymentMethodSection(paymentMethods = []) {
                        try {
                            const response = await fetch("/user/getCurrentUser");
                    if (!response.ok) {
                        throw new Error("Failed to fetch user data");
                    }
                    
                        const data = await response.json();
                        const section = document.getElementById("payment-method-section");
                    
                    if (!section) {
                        console.error("Payment method section not found");
                        return;
                    }
                    
                    // Clear section content but ensure it's visible
                        section.innerHTML = "";
                    section.style.display = "flex"; // Always make it flex display
                        section.classList.remove("center-btn");
                    
                    if (!data.success) {
                        console.error("Failed to get user data");
                        section.innerHTML = "<p style='color: #ff4444;'>Failed to load payment methods. Please refresh the page.</p>";
                        return;
                    }
                    
                        const banking = data.banking || {};
                        const hasBank = banking.bankName && banking.accountNumber && banking.ifsc;
                        const hasUpi = banking.upiId;
                    
                    // Store if user has any payment method
                    const hasAnyPaymentMethod = hasBank || hasUpi;
                    
                    // Create title for the section
                    const title = document.createElement('h3');
                    title.textContent = "Select Payment Method:";
                    title.style.color = "#ffcc22";
                    title.style.marginTop = "0";
                    title.style.marginBottom = "15px";
                    title.style.fontSize = "1.1em";
                    title.style.fontWeight = "bold";
                    section.appendChild(title);
                    
                    // Create a container for the payment method details
                    const detailsContainer = document.createElement('div');
                    detailsContainer.style.width = '100%';
                    detailsContainer.style.marginBottom = '10px';
                    section.appendChild(detailsContainer);
                    
                    if (!hasAnyPaymentMethod) {
                            // Show +Add Payment Method button
                            section.classList.add("center-btn");
                        const message = document.createElement("p");
                        message.textContent = "No payment methods found. Please add one to withdraw.";
                        message.style.color = "#aaa";
                        message.style.marginBottom = "15px";
                        message.style.textAlign = "center";
                        detailsContainer.appendChild(message);
                        
                            const btn = document.createElement("button");
                        btn.innerHTML = '<i class="fas fa-plus-circle"></i> Add Payment Method';
                        btn.style.background = "linear-gradient(45deg, #ffcc22, #ff9900)";
                            btn.onclick = function() {
                            const modal = document.getElementById("add-payment-modal");
                            if (modal) {
                                modal.style.display = "flex";
                            }
                            };
                        detailsContainer.appendChild(btn);
                        } else {
                        // ALWAYS create a dropdown regardless of how many payment methods user has
                        const selectContainer = document.createElement("div");
                        selectContainer.className = "select-container";
                        
                            const select = document.createElement("select");
                            select.id = "payment-method-select";
                            select.required = true;
                        
                        // Always add a default empty option that requires user to make a selection
                        const defaultOption = document.createElement("option");
                        defaultOption.value = "";
                        defaultOption.textContent = "--Select Payment Method--";
                        defaultOption.selected = true;
                        defaultOption.disabled = true;
                        select.appendChild(defaultOption);
                        
                            if (hasBank) {
                            const bankOption = document.createElement("option");
                            bankOption.value = "bank";
                            bankOption.textContent = `Bank: ${banking.bankName} (${banking.accountNumber})`;
                            select.appendChild(bankOption);
                            }
                        
                            if (hasUpi) {
                            const upiOption = document.createElement("option");
                            upiOption.value = "upi";
                            upiOption.textContent = `UPI: ${banking.upiId}`;
                            select.appendChild(upiOption);
                        }
                        
                        selectContainer.appendChild(select);
                        detailsContainer.appendChild(selectContainer);
                        
                        // Hide error message on change
                        select.addEventListener("change", function() {
                            const errorMessage = document.getElementById("error-message");
                            if (errorMessage) {
                                errorMessage.style.display = "none";
                            }
                            
                            // Show selected payment method details
                            const selectedOption = this.options[this.selectedIndex];
                            const selectedValue = this.value;
                            
                            // Remove any existing payment display
                            const existingDisplay = detailsContainer.querySelector('.selected-payment-details');
                            if (existingDisplay) {
                                existingDisplay.remove();
                            }
                            
                            if (selectedValue) {
                                const displayDiv = document.createElement("div");
                                displayDiv.className = "selected-payment-details";
                                
                                if (selectedValue === 'bank') {
                                    displayDiv.innerHTML = `
                                        <i class="fas fa-check-circle"></i> Selected: Bank Account (${banking.bankName})
                                    `;
                                } else {
                                    displayDiv.innerHTML = `
                                        <i class="fas fa-check-circle"></i> Selected: UPI (${banking.upiId})
                                    `;
                                }
                                
                                detailsContainer.appendChild(displayDiv);
                            }
                        });
                        
                        // No Change button anymore as requested
                    }
                    
                    // Enable withdraw button if payment method is available
                    const withdrawBtn = document.getElementById("withdraw-btn2");
                    if (withdrawBtn && hasAnyPaymentMethod && withdrawBtn.disabled) {
                        // Only enable if it was disabled due to payment method issues
                        const errorMsg = document.getElementById("error-message");
                        if (errorMsg && errorMsg.textContent.includes("payment method")) {
                            showMessage('none');
                            withdrawBtn.disabled = false;
                        }
                    }
                    
                    // Return a resolved promise to allow chaining
                    return Promise.resolve();
                } catch (error) {
                    console.error("Error rendering payment method section:", error);
                    const section = document.getElementById("payment-method-section");
                    if (section) {
                        section.innerHTML = "<p style='color: #ff4444;'>Failed to load payment methods. Please refresh the page.</p>";
                        section.style.display = "block";
                    }
                    return Promise.resolve();
                }
            }
                    // Add Payment Method Modal logic
                    document.getElementById("close-payment-modal").onclick = function() {
                        document.getElementById("add-payment-modal").style.display = "none";
                    };
            
            // Add close button functionality
            const modalClose = document.querySelector('.modal-close');
            if (modalClose) {
                modalClose.addEventListener('click', function() {
                    document.getElementById("add-payment-modal").style.display = "none";
                });
            }
                    document.getElementById("add-payment-form").onsubmit = async function(e) {
                        e.preventDefault();
                
                // Get form values
                        const bankName = document.getElementById("modal-bankName").value.trim();
                        const accountNumber = document.getElementById("modal-accountNumber").value.trim();
                        const ifsc = document.getElementById("modal-ifsc").value.trim();
                        const upiId = document.getElementById("modal-upiId").value.trim();
                
                // Check if at least one payment method is provided
                const hasBank = bankName && accountNumber && ifsc;
                const hasUpi = upiId;
                
                if (!hasBank && !hasUpi) {
                    alert("कृपया कम से कम एक पेमेंट मेथड दर्ज करें (बैंक या UPI)");
                    return;
                }
                
                // Disable submit button to prevent double submission
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.textContent;
                submitBtn.disabled = true;
                submitBtn.textContent = "Saving...";
                
                        let success = false;
                
                try {
                    // Save bank details if provided
                    if (hasBank) {
                            const res = await fetch("/user/updateBank", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ bankName, accountNumber, ifsc })
                            });
                            const data = await res.json();
                        if (data.message && data.message.includes("success")) {
                            success = true;
                        }
                    }
                    
                    // Save UPI details if provided
                    if (hasUpi) {
                            const res = await fetch("/user/updateUpi", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ upiId })
                            });
                            const data = await res.json();
                        if (data.message && data.message.includes("success")) {
                            success = true;
                        }
                    }
                    
                        if (success) {
                        // Hide modal and clear form
                            document.getElementById("add-payment-modal").style.display = "none";
                        this.reset();
                        
                        // Update payment method section with new data
                            await renderPaymentMethodSection();
                        
                        // Clear any payment method related errors
                        const errorMessage = document.getElementById("error-message");
                        if (errorMessage.textContent.includes("payment method")) {
                            errorMessage.style.display = "none";
                        }
                        } else {
                        alert("पेमेंट मेथड सेव करने में समस्या हुई। कृपया सही जानकारी दर्ज करें।");
                    }
                } catch (error) {
                    console.error("Error saving payment method:", error);
                    alert("पेमेंट मेथड सेव करने में त्रुटि हुई। कृपया पुनः प्रयास करें।");
                } finally {
                    // Re-enable submit button
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalBtnText;
                        }
                    };
                    // Withdraw form validation
                    const withdrawForm = document.getElementById("withdraw-form");
                    withdrawForm.onsubmit = async function(e) {
                        e.preventDefault();
                
                // Hide all messages at the start
                showMessage('none');
                
                // Get form elements
                if (!amountInput || !withdrawBtn) {
                    console.error("Required form elements not found");
                    return;
                }
                
                const amount = parseFloat(amountInput.value);
                
                // Basic client-side validation
                if (!amount || isNaN(amount) || amount <= 0) {
                    showTimedMessage('error', "कृपया सही राशि दर्ज करें");
                    return;
                }
                
                // ALWAYS check payment method selection
                        const paymentSelect = document.getElementById("payment-method-select");
                let selectedPaymentMethod = null;
                
                if (paymentSelect) {
                    selectedPaymentMethod = paymentSelect.value;
                    
                    if (!selectedPaymentMethod) {
                        showTimedMessage('error', "कृपया payment method select करें।");
                            return;
                        }
                } else {
                    showTimedMessage('error', "कृपया पहले payment method जोड़ें।");
                    return;
                }
                
                // Show loading state
                withdrawBtn.disabled = true;
                withdrawBtn.innerHTML = 'Processing...';
                
                try {
                    // Send the request
                            const response = await fetch("/user/withdraw", {
                                method: "POST",
                        headers: { 
                            "Content-Type": "application/json", 
                            "Accept": "application/json" 
                        },
                        body: JSON.stringify({ 
                            amount: Math.floor(amount), 
                            selectedPaymentMethod: selectedPaymentMethod 
                        })
                    });
                    
                    // Check if response is JSON
                    const contentType = response.headers.get("content-type");
                    if (!contentType || !contentType.includes("application/json")) {
                        throw new Error("Server returned non-JSON response");
                    }
                    
                            const result = await response.json();
                    
                            if (response.ok) {
                        // Success case - show success message for at least 2 seconds
                        showTimedMessage('success', result.message || "विथड्रॉ रिक्वेस्ट सफलतापूर्वक सबमिट की गई!", 2000);
                        
                        // Update available balance
                        const balanceElement = document.getElementById("available-balance");
                        if (balanceElement && result.newBalance !== undefined) {
                            balanceElement.innerText = result.newBalance;
                        }
                        
                        // Clear amount input
                        amountInput.value = "";
                        
                        // Reload page after delay
                        setTimeout(() => { 
                            location.reload(); 
                        }, 2000);
                            } else {
                        // Error case - show error message for at least 2 seconds
                        showTimedMessage('error', result.message || "विथड्रॉ रिक्वेस्ट प्रोसेस करने में त्रुटि हुई", 2000);
                        
                        // Reset button
                        withdrawBtn.disabled = false;
                        withdrawBtn.innerHTML = 'Withdraw';
                            }
                        } catch (error) {
                    console.error("Error submitting withdraw request:", error);
                    
                    // Error case - show error message for at least 2 seconds
                    showTimedMessage('error', "विथड्रॉ रिक्वेस्ट प्रोसेस करने में त्रुटि हुई", 2000);
                    
                    // Reset button
                    withdrawBtn.disabled = false;
                    withdrawBtn.innerHTML = 'Withdraw';
                }
            };
            // Safely initialize payment method section with proper error handling
            async function initializePaymentMethods() {
                try {
                    await renderPaymentMethodSection();
                    
                    // Make sure payment method section is visible after rendering
                    const paymentMethodSection = document.getElementById("payment-method-section");
                    if (paymentMethodSection) {
                        paymentMethodSection.style.display = "flex";
                    }
                    
                    // Do NOT auto-select payment method or auto-enable withdraw button
                    // Only check amount input validity
                    const amount = amountInput ? parseFloat(amountInput.value) : 0;
                    if (amount > 0) {
                        // Still keep the button disabled until user manually selects payment method
                        withdrawBtn.disabled = true;
                    }
                } catch (error) {
                    console.error("Error initializing payment methods:", error);
                }
            }
            
            // Call the safe initialization function
            initializePaymentMethods();
            
            // Handle cancel withdraw modal with proper error handling
            const confirmCancelBtn = document.getElementById('confirm-cancel');
            const cancelActionBtn = document.getElementById('cancel-action');
            
            if (confirmCancelBtn) {
                confirmCancelBtn.addEventListener('click', cancelWithdrawRequest);
            }
            
            if (cancelActionBtn) {
                cancelActionBtn.addEventListener('click', function() {
                    const modal = document.getElementById('cancel-withdraw-modal');
                    if (modal) {
                        modal.style.display = 'none';
                    }
                });
            }
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                const cancelModal = document.getElementById('cancel-withdraw-modal');
                const addPaymentModal = document.getElementById('add-payment-modal');
                
                if (event.target === cancelModal) {
                    cancelModal.style.display = 'none';
                }
                
                if (event.target === addPaymentModal) {
                    addPaymentModal.style.display = 'none';
                }
            });
        });
    </script>
    <script src="/js/navbar.js"></script>
</body>
</html>
