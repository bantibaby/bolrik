{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Panel</title>
    <link rel="stylesheet" href="/css/admin.css">
    
</head>
<body>
    <nav id="navAdmin">
        <h2>Admin Dashboard</h2>
        <a href="/admin/logout">Logout</a>
    </nav>
    
    <section class="adminTables">
        <h3>New Registered Users</h3>
        <table>
            <tr class="adminTr">
                <th>Full Name</th>
                <th>Mobile</th>
                <th>Role</th>
                <th>Referred By</th>
            </tr>
            {{#each users}}
            <tr>
                <td>{{this.fullname}}</td>
                <td>{{this.mobile}}</td>
                <td>{{this.role}}</td>
                <td>{{this.referredBy}}</td>
            </tr>
            {{/each}}
        </table>
    </section>

    <section class="adminTables">
        <h3>User Deposit Requests</h3>
        <table>
            <tr class="adminTr">
                <th>User</th>
                <th>Amount</th>
                <th>Transaction ID</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
            {{#each deposits}}
            <tr>
                <td>{{this.userId}}</td>
                <td>₹{{this.amount}}</td>
                <td>{{this.transactionId}}</td>
                <td>{{this.status}}</td>
                <td>
                    <a href="/admin/approve-deposit/{{this._id}}">Approve</a>
                    <a href="/admin/reject-deposit/{{this._id}}">Reject</a>
                </td>
            </tr>
            {{/each}}
        </table>
    </section>

    <section class="adminTables">
        <h3>User Withdrawal Requests</h3>
        <table>
            <tr class="adminTr">
                <th>User</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
            {{#each withdrawals}}
            <tr>
                <td>{{this.userId}}</td>
                <td>₹{{this.amount}}</td>
                <td>{{this.status}}</td>
                <td>
                    <a href="/admin/approve-withdraw/{{this._id}}">Approve</a>
                    <a href="/admin/reject-withdraw/{{this._id}}">Reject</a>
                </td>
            </tr>
            {{/each}}
        </table>
    </section>

    <section class="adminTables">
        <h3>PreResult Data</h3>
        <table>
            <tr class="adminTr">
                <th>Game ID</th>
                <th>Result Number</th>
                <th>Values</th>
                <th>Created At</th>
            </tr>
            {{#each preResults}}
            <tr>
                <td>{{this.gameId}}</td>
                <td>{{this.resultNumber}}</td>
                <td>{{this.values}}</td>
                <td>{{this.createdAt}}</td>
            </tr>
            {{/each}}
        </table>
    </section>
</body>
</html> --}}



{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Panel</title>
    <link rel="stylesheet" href="/css/admin.css">
</head>
<body>
    <nav id="navAdmin">
        <h2>Admin Dashboard</h2>
        <a href="/admin/logout">Logout</a>
    </nav>
    
    <section class="adminTables">
        <h3>New Registered Users</h3>
        <table>
            <tr class="adminTr">
                <th>Full Name</th>
                <th>Mobile</th>
                <th>Role</th>
                <th>Referred By</th>
            </tr>
            {{#each users}}
            <tr>
                <td>{{this.fullname}}</td>
                <td>{{this.mobile}}</td>
                <td>{{this.role}}</td>
                <td>{{this.referredBy}}</td>
            </tr>
            {{/each}}
        </table>
    </section>

    <section class="adminTables">
        <h3>User Deposit Requests</h3>
        <table>
            <tr class="adminTr">
                <th>User</th>
                <th>Amount</th>
                <th>Bonus</th>
                <th>Transaction ID</th>
                <th>Screenshot</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
            {{#each users}}
                {{#each this.banking.deposits}}
                    {{#if (eq this.status "Pending")}}
                    <tr>
                        <td>{{../fullname}}</td>
                        <td>₹{{this.amount}}</td>
                        <td>{{this.bonus}}</td>

                        <td>{{this.transactionId}}</td>
                        <td>{{this.screenshot}}</td>

                        <td>{{this.status}}</td>
                        <td>
                            <a href="/admin/approve-deposit/{{this._id}}">Approve</a>
                            <a href="/admin/reject-deposit/{{this._id}}">Reject</a>
                        </td>
                    </tr>
                    {{/if}}
                {{/each}}
            {{/each}}
        </table>
    </section>

    <section class="adminTables">
        <h3>User Withdrawal Requests</h3>
        <table>
            <tr class="adminTr">
                <th>User</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
            {{#each users}}
                {{#each this.banking.withdrawals}}
                    {{#if (eq this.status "Pending")}}
                    <tr>
                        <td>{{../fullname}}</td>
                        <td>₹{{this.amount}}</td>
                        <td>{{this.status}}</td>
                        <td>
                            <a href="/admin/approve-withdraw/{{this._id}}">Approve</a>
                            <a href="/admin/reject-withdraw/{{this._id}}">Reject</a>
                        </td>
                    </tr>
                    {{/if}}
                {{/each}}
            {{/each}}
        </table>
    </section>

    <section class="adminTables">
        <h3>PreResult Data</h3>
        <table>
            <tr class="adminTr">
                <th>Game ID</th>
                <th>Result Number</th>
                <th>Values</th>
                <th>Created At</th>
            </tr>
            {{#each preResults}}
            <tr>
                <td>{{this.gameId}}</td>
                <td>{{this.resultNumber}}</td>
                <td>{{this.values}}</td>
                <td>{{this.createdAt}}</td>
            </tr>
            {{/each}}
        </table>
    </section>
</body>
</html> --}}


{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Panel</title>
    <link rel="stylesheet" href="/css/admin.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- ✅ jQuery for AJAX -->
</head>
<body>
    <nav id="navAdmin">
        <h2>Admin Dashboard</h2>
        <a href="/admin/logout">Logout</a>
    </nav>
    
    <!-- ✅ User Management -->
    <section class="adminTables">
        <h3>New Registered Users</h3>
        
        <!-- ✅ Filter Section -->
        <label for="userFilter">Filter by Role:</label>
        <select id="userFilter">
            <option value="all">All</option>
            <option value="user">User</option>
            <option value="admin">Admin</option>
        </select>

        <table>
            <tr class="adminTr">
                <th>Full Name</th>
                <th>Mobile</th>
                <th>Role</th>
                <th>Referred By</th>
            </tr>
            {{#each users}}
            <tr class="user-row" data-role="{{this.role}}">
                <td>{{this.fullname}}</td>
                <td>{{this.mobile}}</td>
                <td>{{this.role}}</td>
                <td>{{this.referredBy}}</td>
            </tr>
            {{/each}}
        </table>
    </section>

    <!-- ✅ Deposit Requests -->
    <section class="adminTables">
        <h3>User Deposit Requests</h3>

        <table>
            <tr class="adminTr">
                <th>User</th>
                <th>Amount</th>
                <th>Bonus</th>
                <th>Transaction ID</th>
                <th>Screenshot</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
            {{#each users}}
                {{#each this.banking.deposits}}
                    {{#if (eq this.status "Pending")}}
                    <tr class="deposit-row">
                        <td>{{../fullname}}</td>
                        <td>₹{{this.amount}}</td>
                        <td>₹{{this.bonus}}</td>
                        <td>{{this.transactionId}}</td>
                        <td>
                            {{#if this.screenshot}}
                                <a href="{{this.screenshot}}" target="_blank">View</a>
                            {{else}}
                                No Screenshot
                            {{/if}}
                        </td>
                        <td class="status-{{this._id}}">{{this.status}}</td>
                        <td>
                            <a href="/admin/approve-deposit/{{this._id}}">Approve</a>
                            <a href="/admin/reject-deposit/{{this._id}}">Reject</a>
                        </td>
                    </tr>
                    {{/if}}
                {{/each}}
            {{/each}}
        </table>
    </section>

    <!-- ✅ Withdrawal Requests -->
    <section class="adminTables">
        <h3>User Withdrawal Requests</h3>

        <table>
            <tr class="adminTr">
                <th>User</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
            {{#each users}}
                {{#each this.banking.withdrawals}}
                    {{#if (eq this.status "Pending")}}
                    <tr class="withdraw-row">
                        <td>{{../fullname}}</td>
                        <td>₹{{this.amount}}</td>
                        <td>{{this.status}}</td>
                        <td>
                            <a href="/admin/approve-withdraw/{{this._id}}">Approve</a>
                            <a href="/admin/reject-withdraw/{{this._id}}">Reject</a>
                        </td>
                    </tr>
                    {{/if}}
                {{/each}}
            {{/each}}
        </table>
    </section>

    <!-- ✅ PreResult Data -->
    <section class="adminTables">
        <h3>PreResult Data</h3>
        
        <!-- Timeframe Tabs -->
        <div class="timeframe-tabs">
            <button class="timeframe-tab active" data-timeframe="30">30 सेकंड</button>
            <button class="timeframe-tab" data-timeframe="45">45 सेकंड</button>
            <button class="timeframe-tab" data-timeframe="60">1 मिनट</button>
            <button class="timeframe-tab" data-timeframe="150">2:30 मिनट</button>
        </div>
        
        <!-- Tab Content -->
        <div id="preResultContent">
            <table>
                <tr class="adminTr">
                    <th>Game ID</th>
                    <th>Result Number</th>
                    <th>Values</th>
                    <th>Timeframe</th>
                    <th>Created At</th>
                </tr>
                {{#each preResults}}
                <tr class="preresult-row" data-timeframe="{{this.timeframe}}">
                    <td>{{this.gameId}}</td>
                    <td>{{this.resultNumber}}</td>
                    <td>{{this.values}}</td>
                    <td>
                        {{#if (eq this.timeframe 30)}}
                            30 सेकंड
                        {{else if (eq this.timeframe 45)}}
                            45 सेकंड
                        {{else if (eq this.timeframe 60)}}
                            1 मिनट
                        {{else if (eq this.timeframe 150)}}
                            2:30 मिनट
                        {{else}}
                            {{this.timeframe}}s
                        {{/if}}
                    </td>
                    <td>{{this.createdAt}}</td>
                </tr>
                {{/each}}
            </table>
        </div>
    </section>

    <!-- ✅ JavaScript for Filtering and AJAX Updates -->
    <script>
        $(document).ready(function () {
            // ✅ User Filter
            $("#userFilter").change(function () {
                let selectedRole = $(this).val();
                $(".user-row").each(function () {
                    if (selectedRole === "all" || $(this).data("role") === selectedRole) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });

            // ✅ Approve Deposit AJAX
            $(".approve-deposit").click(function () {
                let depositId = $(this).data("id");
                $.ajax({
                    url: "/admin/approve-deposit/" + depositId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + depositId).text("Approved");
                        alert("Deposit Approved!");
                    },
                    error: function () {
                        alert("Error approving deposit");
                    }
                });
            });

            // ✅ Reject Deposit AJAX
            $(".reject-deposit").click(function () {
                let depositId = $(this).data("id");
                $.ajax({
                    url: "/admin/reject-deposit/" + depositId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + depositId).text("Rejected");
                        alert("Deposit Rejected!");
                    },
                    error: function () {
                        alert("Error rejecting deposit");
                    }
                });
            });

            // ✅ Approve Withdrawal AJAX
            $(".approve-withdraw").click(function () {
                let withdrawId = $(this).data("id");
                $.ajax({
                    url: "/admin/approve-withdraw/" + withdrawId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + withdrawId).text("Approved");
                        alert("Withdrawal Approved!");
                    },
                    error: function () {
                        alert("Error approving withdrawal");
                    }
                });
            });

            // ✅ Reject Withdrawal AJAX
            $(".reject-withdraw").click(function () {
                let withdrawId = $(this).data("id");
                $.ajax({
                    url: "/admin/reject-withdraw/" + withdrawId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + withdrawId).text("Rejected");
                        alert("Withdrawal Rejected!");
                    },
                    error: function () {
                        alert("Error rejecting withdrawal");
                    }
                });
            });
        });
    </script>
</body>
</html> --}}


<!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Panel</title>
    <link rel="stylesheet" href="/css/admin.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- ✅ jQuery for AJAX -->
</head>
<body class="admin-panel">
  {{#if query.msg}}
    <div class="admin-feedback {{#if query.success}}success{{else}}error{{/if}}">
      {{query.msg}}
    </div>
  {{/if}}
  <nav id="navAdmin">
    <h2>Admin Dashboard</h2>
    <div>
      <a href="/admin/fingerprints" style="margin-right: 15px;">Device Fingerprints</a>
      <a href="/admin/ip-addresses" style="margin-right: 15px;">IP Monitoring</a>
      <a href="/admin/payment-methods" style="margin-right: 15px;">Payment Methods</a>
      <a href="/admin/logout">Logout</a>
    </div>
  </nav>

  <style>
.badge {
  background: #ff3b3b;
  color: #fff;
  border-radius: 50%;
  padding: 2px 7px;
  font-size: 13px;
  font-weight: bold;
  position: absolute;
  top: -6px;
  right: -6px;
  z-index: 2;
}
.bell {
  font-size: 28px;
  color: #222;
  cursor: pointer;
  position: relative;
  margin-right: 18px;
}
.notification-section {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-bottom: 10px;
  position: relative;
}
.notification-modal {
  display: none;
  position: absolute;
  right: 0;
  top: 38px;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  min-width: 260px;
  max-width: 95vw;
  box-shadow: 0 4px 16px rgba(0,0,0,0.13);
  z-index: 10;
  padding: 12px 10px 10px 10px;
}
.notification-modal.active {
  display: block;
}
.notification-user-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 6px 0;
  border-bottom: 1px solid #eee;
}
.notification-user-row:last-child { border-bottom: none; }
.mark-read-btn {
  background: #ffcc00;
  color: #222;
  border: none;
  border-radius: 4px;
  padding: 3px 10px;
  font-size: 13px;
  cursor: pointer;
  margin-left: 10px;
}
@media (max-width: 700px) {
  .adminTables table, .adminTables th, .adminTables td {
    font-size: 12px;
    padding: 4px 2px;
  }
  .notification-modal {
    min-width: 180px;
    font-size: 13px;
  }
  .bell { font-size: 22px; }
}
.new-user-badge {
  background: #4caf50;
  color: #fff;
  font-size: 11px;
  border-radius: 8px;
  padding: 2px 8px;
  margin-left: 8px;
  font-weight: bold;
}
.edit-balance-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0 0 0 5px;
  display: inline-flex;
  align-items: center;
  opacity: 0.7;
  transition: opacity 0.2s;
}
.edit-balance-btn:hover {
  opacity: 1;
}
.edit-icon {
  font-size: 14px;
}
.balance-cell {
  position: relative;
}
.inline-balance-edit {
  display: flex;
  align-items: center;
  margin-top: 5px;
}
.balance-input {
  width: 80px;
  padding: 4px 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
  margin-right: 5px;
}
.save-balance-btn, .cancel-balance-btn {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  padding: 0 3px;
}
.save-balance-btn:hover {
  color: green;
}
.cancel-balance-btn:hover {
  color: red;
}
#balanceModalOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
}
#balanceModal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: 8px;
  width: 90%;
  max-width: 500px;
  z-index: 1000;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}
.admin-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 20px;
  border-bottom: 1px solid #eee;
  font-weight: bold;
  font-size: 18px;
}
.admin-modal-close {
  cursor: pointer;
  font-size: 24px;
}
.form-group {
  margin-bottom: 15px;
}
.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}
.form-group input, .form-group select, .form-group textarea {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}
.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}
.balance-submit-btn {
  background: #ffcc00;
  color: #333;
  border: none;
  border-radius: 4px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
}
.balance-cancel-btn {
  background: #eee;
  color: #333;
  border: none;
  border-radius: 4px;
  padding: 8px 16px;
  font-weight: 600;
  cursor: pointer;
}
.balance-user-name, .current-balance {
  font-weight: 600;
  font-size: 16px;
}
.current-balance {
  color: #1a73e8;
}
/* Add styles for payment method details */
.payment-method-cell {
  position: relative;
}
.payment-method-summary {
  display: flex;
  align-items: center;
  cursor: pointer;
  padding: 2px 5px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: #f9f9f9;
  max-width: 180px;
  margin: 0 auto;
}
.payment-method-type {
  font-weight: bold;
  margin-right: 5px;
  font-size: 12px;
}
.payment-method-value {
  max-width: 100px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 12px;
}
.payment-method-dropdown {
  margin-left: 5px;
  font-size: 10px;
}
.payment-method-details {
  display: none;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  top: 100%;
  background: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px;
  min-width: 220px;
  z-index: 100;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}
.payment-detail-row {
  margin-bottom: 6px;
  display: flex;
  align-items: center;
}
.payment-detail-label {
  font-weight: bold;
  margin-right: 5px;
  min-width: 80px;
  font-size: 12px;
}
.payment-detail-value {
  word-break: break-all;
  font-size: 12px;
}
.copy-btn {
  background: none;
  border: none;
  cursor: pointer;
  color: #1a73e8;
  padding: 0;
  margin-left: 5px;
  font-size: 12px;
}
.copy-btn:hover {
  color: #174ea6;
}
.admin-feedback {
  margin: 10px auto;
  padding: 10px 20px;
  border-radius: 6px;
  font-weight: 600;
  text-align: center;
  max-width: 600px;
  font-size: 16px;
}
.admin-feedback.success { background: #e6ffe6; color: #1a7f1a; border: 1px solid #b2e6b2; }
.admin-feedback.error { background: #ffe6e6; color: #b20000; border: 1px solid #e6b2b2; }
</style>
<div class="notification-section">
  <span class="bell" id="notifBell" onclick="toggleNotifModal()">&#128276;
    {{#if notificationUsers.length}}
      <span class="badge" id="notifBadge">{{notificationUsers.length}}</span>
    {{/if}}
  </span>
  <div class="notification-modal" id="notifModal">
    <div style="font-weight:600; margin-bottom:8px;">नए यूज़र (24 घंटे में):</div>
    {{#if notificationUsers.length}}
      {{#each notificationUsers}}
        <div class="notification-user-row" data-userid="{{_id}}">
          <span>{{fullname}}<br><span style="font-size:12px;color:#888;">{{mobile}}<br>{{formatDatePretty regDate}}</span></span>
          <button class="mark-read-btn" onclick="markUserRead('{{_id}}', this)">Mark as Read</button>
        </div>
      {{/each}}
    {{else}}
      <div style="color:#888;">No new users</div>
    {{/if}}
  </div>
</div>
    <section class="adminTables">
        <h3>New Registered Users</h3>
    <form class="filter-bar" id="userFilterBar" method="get" action="/admin/dashboard" style="margin-bottom:12px;display:flex;flex-wrap:wrap;gap:10px;align-items:center;">
        <label>Sort by:
            <select name="sortBy">
                <option value="regDate">Registration Date</option>
                <option value="depositsCount">Total Deposit</option>
                <option value="withdrawalsCount">Total Withdraw</option>
                <option value="referredUsersCount">Referred Users</option>
                <option value="pendingBalance">Pending Balance</option>
                <option value="betHistoryCount">Betting History</option>
                <option value="welcomeBonus">Welcome Bonus</option>
            </select>
        </label>
        <label>Order:
            <select name="order">
                <option value="desc">Descending</option>
                <option value="asc">Ascending</option>
            </select>
        </label>
        <label>Role:
            <select name="role">
                <option value="">All</option>
            <option value="user">User</option>
            <option value="admin">Admin</option>
        </select>
        </label>
        <label>Mobile:
            <input type="text" name="mobile" placeholder="Search number" style="width:120px;">
        </label>
        <button type="submit" style="background:#ffcc00;padding:4px 16px;border-radius:4px;border:none;font-weight:600;">Apply</button>
        <a href="/admin/dashboard" style="background:#eee;padding:4px 16px;border-radius:4px;border:none;font-weight:600;text-decoration:none;">Reset</a>
    </form>
    <div class="table-responsive">
        <table>
            <tr class="adminTr">
            <th>Registration Date & Time</th>
            <th>Name</th>
            <th>Number</th>
            <th>Payment Method</th>
            <th>Welcome Bonus</th>
            <th>Pending Balance</th>
            <th>Total Deposit</th>
            <th>Total Withdraw</th>
                <th>Referred By</th>
            <th>Total Referred Users</th>
            <th>Betting History</th>
            </tr>
        {{#each userTableData}}
        <tr>
            <td>{{formatDatePretty regDate}}</td>
            <td>{{#if fullname}}{{fullname}}{{else}}-{{/if}} {{#if isNewUser}}<span class="new-user-badge">New User</span>{{/if}}</td>
            <td>{{#if mobile}}{{mobile}}{{else}}-{{/if}}</td>
            <td>₹{{#if welcomeBonus}}{{welcomeBonus}}{{else}}0{{/if}}</td>
            <td class="balance-cell" data-user-id="{{_id}}" data-user-name="{{#if fullname}}{{fullname}}{{else}}-{{/if}}">
                <span class="balance-display">₹{{#if pendingBalance}}{{pendingBalance}}{{else}}0{{/if}}</span>
                <button class="edit-balance-btn" onclick="showBalanceInput(this, '{{_id}}', '{{#if fullname}}{{fullname}}{{else}}-{{/if}}', {{#if pendingBalance}}{{pendingBalance}}{{else}}0{{/if}})">
                    <i class="edit-icon">✏️</i>
                </button>
                <div class="inline-balance-edit" style="display: none;">
                    <input type="number" class="balance-input" value="{{#if pendingBalance}}{{pendingBalance}}{{else}}0{{/if}}" min="0" step="1">
                </div>
            </td>
            <!-- Total Deposit (count + dropdown) -->
            <td>
                <button class="dropbtn" onclick="openAdminModal('deposit', '{{_id}}')">{{depositsCount}} <span class="dropdown-icon">&#9660;</span></button>
            </td>
            <!-- Total Withdraw (count + dropdown) -->
            <td>
                <button class="dropbtn" onclick="openAdminModal('withdraw', '{{_id}}')">{{withdrawalsCount}} <span class="dropdown-icon">&#9660;</span></button>
            </td>
            <td>{{#if referredBy}}{{referredBy}}{{else}}-{{/if}}</td>
            <!-- Total Referred Users (count + dropdown) -->
            <td>
                <button class="dropbtn" onclick="openAdminModal('referred', '{{_id}}')">{{referredUsersCount}} <span class="dropdown-icon">&#9660;</span></button>
            </td>
            <td>
                <button class="dropbtn" onclick="openAdminModal('betting', '{{_id}}')">{{betHistoryCount}} <span class="dropdown-icon">&#9660;</span></button>
            </td>
            </tr>
            {{/each}}
        </table>
    </div>
<!-- Pagination Controls -->
{{#if totalPages}}
<div class="pagination-bar">
  <form id="paginationForm" method="get" action="/admin/dashboard" style="display:flex;justify-content:center;align-items:center;gap:6px;margin:18px 0 8px 0;flex-wrap:wrap;">
    {{#if (gt currentPage 1)}}
      <button type="submit" name="page" value="1" class="pagination-btn">First</button>
      <button type="submit" name="page" value="{{subtract currentPage 1}}" class="pagination-btn">Prev</button>
    {{else}}
      <button type="button" class="pagination-btn disabled" disabled>First</button>
      <button type="button" class="pagination-btn disabled" disabled>Prev</button>
    {{/if}}
    {{!-- Page numbers --}}
    {{#each (paginationPages currentPage totalPages)}}
      {{#if (eq this ../currentPage)}}
        <button type="button" class="pagination-btn active" disabled>{{this}}</button>
      {{else}}
        <button type="submit" name="page" value="{{this}}" class="pagination-btn">{{this}}</button>
      {{/if}}
    {{/each}}
    {{#if (lt currentPage totalPages)}}
      <button type="submit" name="page" value="{{add currentPage 1}}" class="pagination-btn">Next</button>
      <button type="submit" name="page" value="{{totalPages}}" class="pagination-btn">Last</button>
    {{else}}
      <button type="button" class="pagination-btn disabled" disabled>Next</button>
      <button type="button" class="pagination-btn disabled" disabled>Last</button>
    {{/if}}
    {{!-- Preserve filters as hidden fields --}}
    {{#each ../query}}
      {{#unless (eq @key "page")}}
        <input type="hidden" name="{{@key}}" value="{{this}}" />
      {{/unless}}
    {{/each}}
  </form>
</div>
{{/if}}
</section>
<script>
function toggleDropdown(btn, event) {
    event.stopPropagation();
    document.querySelectorAll('.dropdown-content').forEach(function(el) {
        if (el !== btn.nextElementSibling) {
            el.style.display = 'none';
        }
    });
    var content = btn.nextElementSibling;
    if (content.style.display === 'block') {
        content.style.display = 'none';
    } else {
        content.style.display = 'block';
    }
}
window.onclick = function(event) {
    if (!event.target.closest('.dropdown') && !event.target.closest('.notification-section')) {
        document.querySelectorAll('.dropdown-content').forEach(function(el) {
            el.style.display = 'none';
        });
        document.getElementById('notifModal').classList.remove('active');
    }
}
function toggleNotifModal() {
  var modal = document.getElementById('notifModal');
  modal.classList.toggle('active');
}
function markUserRead(userId, btn) {
  fetch('/admin/mark-user-notified/' + userId, { method: 'POST' })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        // Remove user row from notification list
        var row = btn.closest('.notification-user-row');
        row.parentNode.removeChild(row);
        // Update badge count
        var badge = document.getElementById('notifBadge');
        if (badge) {
          var count = parseInt(badge.textContent) - 1;
          if (count > 0) badge.textContent = count;
          else badge.parentNode.removeChild(badge);
        }
      }
    });
}
function copyToClipboard(icon, value) {
    navigator.clipboard.writeText(value);
    var msg = icon.nextElementSibling;
    msg.style.display = 'inline';
    setTimeout(function() { msg.style.display = 'none'; }, 1200);
}
function openAdminModal(type, userId) {
  document.getElementById('adminModalOverlay').style.display = 'block';
  document.getElementById('adminModal').style.display = 'block';
  var title = '';
  var contentDiv = document.getElementById('adminModalContent');
  contentDiv.innerHTML = '<div class="admin-modal-loader">Loading...</div>';
  if (type === 'deposit') title = 'User Deposit History';
  if (type === 'withdraw') title = 'User Withdraw History';
  if (type === 'referred') title = 'User Referred Users';
  if (type === 'betting') title = 'User Betting History';
  document.getElementById('adminModalTitle').textContent = title;
  // AJAX load
  if (type === 'deposit') {
    fetch('/admin/user-deposits/' + userId)
      .then(res => res.json())
      .then(data => {
        if (data.success && data.deposits.length) {
          var html = '<div class="modal-table-responsive"><table class="deposit-table"><tr><th>Amount</th><th>Status</th><th>Bonus</th><th>Txn ID</th><th>Date</th></tr>';
          data.deposits.forEach(function(dep) {
            var statusClass = '';
            if (dep.status === 'Approved') statusClass = 'status-approved';
            else if (dep.status === 'Pending') statusClass = 'status-pending';
            else if (dep.status === 'Rejected') statusClass = 'status-rejected';
            html += `<tr><td>₹${dep.amount||0}</td><td class="${statusClass}">${dep.status||'-'}</td><td>₹${dep.bonus||0}</td><td>${dep.transactionId||'-'}</td><td>${formatDatePretty(dep.date)}</td></tr>`;
          });
          html += '</table></div>';
          contentDiv.innerHTML = html;
        } else {
          contentDiv.innerHTML = '<div style="color:#888;">No Deposits</div>';
        }
      });
  }
  if (type === 'withdraw') {
    fetch('/admin/user-withdrawals/' + userId)
      .then(res => res.json())
      .then(data => {
        if (data.success && data.withdrawals.length) {
          var html = '<div class="modal-table-responsive"><table class="withdraw-table"><tr><th>Amount</th><th>Status</th><th>Date</th></tr>';
          data.withdrawals.forEach(function(wd) {
            var statusClass = '';
            if (wd.status === 'Approved') statusClass = 'status-approved';
            else if (wd.status === 'Pending') statusClass = 'status-pending';
            else if (wd.status === 'Rejected') statusClass = 'status-rejected';
            html += `<tr><td>₹${wd.amount||0}</td><td class="${statusClass}">${wd.status||'-'}</td><td>${formatDatePretty(wd.date)}</td></tr>`;
          });
          html += '</table></div>';
          contentDiv.innerHTML = html;
        } else {
          contentDiv.innerHTML = '<div style="color:#888;">No Withdrawals</div>';
        }
      });
  }
  if (type === 'referred') {
    fetch('/admin/user-referred-users/' + userId)
      .then(res => res.json())
      .then(data => {
        if (data.success && data.referredUsers.length) {
          var html = '<div class="modal-table-responsive"><table class="referred-table"><tr><th>Name</th><th>Number</th><th>Reg. Date</th><th>Welcome Bonus</th><th>First Deposit</th><th>Deposit Bonus (30%)</th><th>Deposit Status</th></tr>';
          data.referredUsers.forEach(function(u) {
            var statusClass = '';
            if (u.depositStatus === 'Approved') statusClass = 'status-approved';
            else if (u.depositStatus === 'Pending') statusClass = 'status-pending';
            else if (u.depositStatus === 'Rejected') statusClass = 'status-rejected';
            html += `<tr><td>${u.fullname||'-'}</td><td>${u.mobile||'-'}</td><td>${formatDatePretty(u.regDate)}</td><td>₹${u.welcomeBonus||0}</td><td>₹${u.firstDepositAmount||0}</td><td>₹${u.depositBonus||0}</td><td class="${statusClass}">${u.depositStatus||'-'}</td></tr>`;
          });
          html += '</table></div>';
          contentDiv.innerHTML = html;
        } else {
          contentDiv.innerHTML = '<div style="color:#888;">No Referred Users</div>';
        }
      });
  }
  if (type === 'betting') {
    fetch('/admin/user-betting-history/' + userId)
      .then(res => res.json())
      .then(data => {
        if (data.success && data.history.length) {
          var html = '<div class="modal-table-responsive"><table class="bet-history-table"><tr><th>Bet Amount</th><th>Win Amount</th><th>Loss Amount</th><th>Multiplier</th><th>Status</th></tr>';
          data.history.forEach(function(bet) {
            var rowClass = '';
            var statusText = '-';
            var statusClass = '';
            if ((bet.winAmount||0) > 0) { rowClass = 'bet-win-row'; statusText = 'Win'; statusClass = 'status-approved'; }
            else if ((bet.lossAmount||0) > 0) { rowClass = 'bet-loss-row'; statusText = 'Loss'; statusClass = 'status-rejected'; }
            else { statusText = 'None'; statusClass = ''; }
            html += `<tr class="${rowClass}"><td>₹${bet.betAmount||0}</td><td>₹${bet.winAmount||0}</td><td>₹${bet.lossAmount||0}</td><td>${bet.multiplier||'-'}</td><td class="${statusClass}">${statusText}</td></tr>`;
          });
          html += '</table></div>';
          contentDiv.innerHTML = html;
        } else {
          contentDiv.innerHTML = '<div style="color:#888;">No Betting History</div>';
        }
      });
  }
}
function closeAdminModal() {
  document.getElementById('adminModalOverlay').style.display = 'none';
  document.getElementById('adminModal').style.display = 'none';
}
document.getElementById('adminModalOverlay').onclick = closeAdminModal;
function formatDatePretty(date) {
    if (!date) return '-';
    var d = new Date(date);
    var pad = n => n.toString().padStart(2, '0');
    var hh = pad(d.getHours());
    var mm = pad(d.getMinutes());
    var DD = pad(d.getDate());
    var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var monthName = months[d.getMonth()];
    var YYYY = d.getFullYear();
    return `${hh}:${mm} ${DD} ${monthName} ${YYYY}`;
}

// Balance Modal Functions
function openBalanceModal(userId, userName, currentBalance) {
  document.getElementById('balanceModalOverlay').style.display = 'block';
  document.getElementById('balanceModal').style.display = 'block';
  
  // Set form values
  document.getElementById('balanceUserId').value = userId;
  document.getElementById('balanceUserName').textContent = userName;
  document.getElementById('currentBalance').textContent = '₹' + currentBalance;
  
  // Reset form
  document.getElementById('balanceOperation').value = 'add';
  document.getElementById('balanceAmount').value = '';
  document.getElementById('balanceReason').value = '';
}

function closeBalanceModal() {
  document.getElementById('balanceModalOverlay').style.display = 'none';
  document.getElementById('balanceModal').style.display = 'none';
}

document.getElementById('balanceModalOverlay').onclick = closeBalanceModal;

// Balance Edit Form Submit
document.getElementById('balanceEditForm').onsubmit = function(e) {
  e.preventDefault();
  
  const userId = document.getElementById('balanceUserId').value;
  const operation = document.getElementById('balanceOperation').value;
  const amount = document.getElementById('balanceAmount').value;
  const reason = document.getElementById('balanceReason').value;
  
  // Validate
  if (!userId || !operation || !amount || amount <= 0) {
    alert('Please enter a valid amount');
    return;
  }
  
  // Confirm
  const operationText = operation === 'add' ? 'add' : operation === 'subtract' ? 'subtract' : 'set';
  if (!confirm(`Are you sure you want to ${operationText} ₹${amount} ${operation !== 'set' ? 'to/from' : 'as'} this user's balance?`)) {
    return;
  }
  
  // Submit
  fetch('/admin/update-user-balance', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      userId,
      operation,
      amount,
      reason
    })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert(`User balance successfully updated from ₹${data.previousBalance} to ₹${data.newBalance}`);
      closeBalanceModal();
      
      // Update the balance displayed in the table
      const userRow = document.querySelector(`tr [onclick="openBalanceModal('${userId}', '${document.getElementById('balanceUserName').textContent}', ${data.previousBalance})"]`).closest('tr');
      const balanceCell = userRow.querySelector('td:nth-child(6)'); // Adjust this index based on your table structure
      
      // Update the balance value and the onclick attribute
      balanceCell.innerHTML = `₹${data.newBalance} <button class="edit-balance-btn" onclick="openBalanceModal('${userId}', '${document.getElementById('balanceUserName').textContent}', ${data.newBalance})"><i class="edit-icon">✏️</i></button>`;
    } else {
      alert('Error: ' + (data.message || 'Failed to update balance'));
    }
  })
  .catch(err => {
    console.error('Error updating balance:', err);
    alert('Error updating balance. Please try again.');
  });
};

// Inline Balance Edit Functions
function showBalanceInput(btn, userId, userName, currentBalance) {
  const cell = btn.closest('.balance-cell');
  cell.querySelector('.balance-display').style.display = 'none';
  cell.querySelector('.edit-balance-btn').style.display = 'none';
  cell.querySelector('.inline-balance-edit').style.display = 'flex';
  cell.querySelector('.balance-input').focus();
}

function cancelBalanceEdit(btn) {
  const cell = btn.closest('.balance-cell');
  cell.querySelector('.balance-display').style.display = 'inline';
  cell.querySelector('.edit-balance-btn').style.display = 'inline-flex';
  cell.querySelector('.inline-balance-edit').style.display = 'none';
  
  // Reset input value to original
  const originalValue = cell.querySelector('.balance-display').textContent.replace('₹', '');
  cell.querySelector('.balance-input').value = originalValue;
}

function saveBalance(btn, userId, userName) {
  const cell = btn.closest('.balance-cell');
  const newBalance = cell.querySelector('.balance-input').value;
  const currentBalance = cell.querySelector('.balance-display').textContent.replace('₹', '');
  
  // Validate
  if (!newBalance || newBalance < 0) {
    alert('Please enter a valid amount');
    return;
  }
  
  // Confirm
  if (!confirm(`Are you sure you want to update this user's balance to ₹${newBalance}?`)) {
    cancelBalanceEdit(btn);
    return;
  }
  
  // Submit
  fetch('/admin/update-user-balance', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      userId,
      operation: 'set',
      amount: newBalance,
      reason: 'Direct balance edit from admin panel'
    })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      // Update the display
      cell.querySelector('.balance-display').textContent = '₹' + data.newBalance;
      
      // Hide edit controls
      cell.querySelector('.balance-display').style.display = 'inline';
      cell.querySelector('.edit-balance-btn').style.display = 'inline-flex';
      cell.querySelector('.inline-balance-edit').style.display = 'none';
      
      // Show success message
      alert(`Balance successfully updated from ₹${data.previousBalance} to ₹${data.newBalance}`);
    } else {
      alert('Error: ' + (data.message || 'Failed to update balance'));
    }
  })
  .catch(err => {
    console.error('Error updating balance:', err);
    alert('Error updating balance. Please try again.');
  });
}
</script>

    <!-- ✅ Deposit Requests -->
    <section class="adminTables">
        <div class="notification-section">
          <span class="bell" id="depositNotifBell" onclick="toggleDepositNotifModal()">&#128276;
            <span class="badge" id="depositNotifBadge" style="display:none;">0</span>
          </span>
          <div class="notification-modal" id="depositNotifModal">
            <div style="font-weight:600; margin-bottom:8px;">नई Deposit Requests (24 घंटे में):</div>
            <div id="depositNotifList" style="max-height:180px;overflow-y:auto;"></div>
          </div>
        </div>
        <h3>User Deposit Requests</h3>
        <form id="depositFilterBar" class="filter-bar" style="margin-bottom:12px;display:flex;flex-wrap:wrap;gap:10px;align-items:center;">
          <label>User: <input type="text" name="user" placeholder="Name" style="width:110px;"></label>
          <label>Amount: <input type="number" name="amountMin" placeholder="Min" style="width:60px;"> - <input type="number" name="amountMax" placeholder="Max" style="width:60px;"></label>
          <label>Status:
            <select name="status">
              <option value="">All</option>
              <option value="Pending">Pending</option>
              <option value="Approved">Approved</option>
              <option value="Rejected">Rejected</option>
              <option value="Paid">Paid</option>
            </select>
          </label>
          <label>Date: <input type="date" name="dateFrom"> - <input type="date" name="dateTo"></label>
          <label>Sort by:
            <select name="sortBy">
              <option value="date">Date</option>
              <option value="amount">Amount</option>
              <option value="userId">User</option>
              <option value="status">Status</option>
            </select>
          </label>
          <label>Order:
            <select name="order">
              <option value="desc">Descending</option>
              <option value="asc">Ascending</option>
            </select>
          </label>
          <button type="submit" style="background:#ffcc00;padding:4px 16px;border-radius:4px;border:none;font-weight:600;">Apply</button>
          <button type="button" onclick="resetDepositFilter()" style="background:#eee;padding:4px 16px;border-radius:4px;border:none;font-weight:600;">Reset</button>
        </form>
        <div class="table-responsive">
            <table id="depositTable">
            <tr class="adminTr">
                <th>User</th>
                <th>Mobile</th> <!-- Added mobile number column -->
                <th>Amount</th>
                <th>Bonus</th>
                <th>Transaction ID</th>
                <th>Screenshot</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
                <tbody id="depositTableBody">
                    <tr><td colspan="8" style="text-align:center;color:#888;">Loading...</td></tr>
                </tbody>
        </table>
        </div>
    </section>

    <!-- ✅ Withdrawal Requests -->
    <section class="adminTables">
        <div class="notification-section">
          <span class="bell" id="withdrawNotifBell" onclick="toggleWithdrawNotifModal()">&#128276;
            <span class="badge" id="withdrawNotifBadge" style="display:none;">0</span>
          </span>
          <div class="notification-modal" id="withdrawNotifModal">
            <div style="font-weight:600; margin-bottom:8px;">नई Withdrawal Requests (24 घंटे में):</div>
            <div id="withdrawNotifList" style="max-height:180px;overflow-y:auto;"></div>
          </div>
        </div>
        <h3>User Withdrawal Requests</h3>
        <form id="withdrawFilterBar" class="filter-bar" style="margin-bottom:12px;display:flex;flex-wrap:wrap;gap:10px;align-items:center;">
          <label>User: <input type="text" name="user" placeholder="Name" style="width:110px;"></label>
          <label>Amount: <input type="number" name="amountMin" placeholder="Min" style="width:60px;"> - <input type="number" name="amountMax" placeholder="Max" style="width:60px;"></label>
          <label>Status:
            <select name="status">
              <option value="">All</option>
              <option value="Pending">Pending</option>
              <option value="Approved">Approved</option>
              <option value="Rejected">Rejected</option>
              <option value="Paid">Paid</option>
            </select>
          </label>
          <label>Date: <input type="date" name="dateFrom"> - <input type="date" name="dateTo"></label>
          <label>Sort by:
            <select name="sortBy">
              <option value="date">Date</option>
              <option value="amount">Amount</option>
              <option value="userId">User</option>
              <option value="status">Status</option>
            </select>
          </label>
          <label>Order:
            <select name="order">
              <option value="desc">Descending</option>
              <option value="asc">Ascending</option>
            </select>
          </label>
          <button type="submit" style="background:#ffcc00;padding:4px 16px;border-radius:4px;border:none;font-weight:600;">Apply</button>
          <button type="button" onclick="resetWithdrawFilter()" style="background:#eee;padding:4px 16px;border-radius:4px;border:none;font-weight:600;">Reset</button>
        </form>
        <div class="table-responsive">
            <table id="withdrawTable">
            <tr class="adminTr">
                <th>User</th>
                <th>Mobile</th> <!-- Added mobile number column -->
                <th>Amount</th>
                <th>Payment Method</th> <!-- Added payment method column -->
                <th>Status</th>
                <th>Action</th>
            </tr>
                <tbody id="withdrawTableBody">
                    <tr><td colspan="6" style="text-align:center;color:#888;">Loading...</td></tr>
                </tbody>
        </table>
        </div>
    </section>

    <!-- ✅ PreResult Data -->
    <section class="adminTables">
        <h3>PreResult Data (Latest 10 per timeframe)</h3>
        
        <!-- Timeframe Tabs -->
        <div class="timeframe-tabs">
            <button class="timeframe-tab active" data-timeframe="30">30 सेकंड</button>
            <button class="timeframe-tab" data-timeframe="45">45 सेकंड</button>
            <button class="timeframe-tab" data-timeframe="60">1 मिनट</button>
            <button class="timeframe-tab" data-timeframe="150">2:30 मिनट</button>
            <button class="timeframe-tab" data-timeframe="all">सभी</button>
        </div>
        
        <!-- Tab Content -->
        <div class="table-responsive">
            <table>
                <tr class="adminTr">
                    <th style="text-align:center;">Game ID</th>
                    <th style="text-align:center;">Result Number</th>
                    <th style="text-align:center;">Values</th>
                    <th style="text-align:center;">Timeframe</th>
                    <th style="text-align:center;">Created At</th>
                </tr>
                {{#each preResults}}
                <tr class="preresult-row" data-timeframe="{{this.timeframe}}">
                    <td style="text-align:center;">{{this.gameId}}</td>
                    <td style="text-align:center;">{{this.resultNumber}}</td>
                    <td style="text-align:center;">
  <table class="mini-multiplier-table">
    <tr>
      <th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th>
    </tr>
    <tr>
      {{#each (splitValues this.values)}}
        <td>{{this}}</td>
      {{/each}}
    </tr>
  </table>
</td>
                    <td style="text-align:center;">
                        {{#if (eq this.timeframe 30)}}
                            30 सेकंड
                        {{else if (eq this.timeframe 45)}}
                            45 सेकंड
                        {{else if (eq this.timeframe 60)}}
                            1 मिनट
                        {{else if (eq this.timeframe 150)}}
                            2:30 मिनट
                        {{else}}
                            {{this.timeframe}}s
                        {{/if}}
                    </td>
                    <td style="text-align:center;">{{this.createdAt}}</td>
                </tr>
                {{/each}}
            </table>
        </div>
    </section>

    <!-- ✅ JavaScript for Filtering and AJAX Updates -->
    <script>
        $(document).ready(function () {
            // ✅ User Filter
            $("#userFilter").change(function () {
                let selectedRole = $(this).val();
                $(".user-row").each(function () {
                    if (selectedRole === "all" || $(this).data("role") === selectedRole) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });
            
            // ✅ PreResult Timeframe Tabs
            $(".timeframe-tab").click(function() {
                // Remove active class from all tabs
                $(".timeframe-tab").removeClass("active");
                
                // Add active class to clicked tab
                $(this).addClass("active");
                
                // Get selected timeframe
                const selectedTimeframe = $(this).data("timeframe");
                
                // Filter preresult rows
                $(".preresult-row").each(function() {
                    if (selectedTimeframe === "all" || $(this).data("timeframe") == selectedTimeframe) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });
            
            // Trigger click on default tab (30 seconds)
            $(".timeframe-tab[data-timeframe='30']").click();

            // ✅ Approve Deposit AJAX
            $(".approve-deposit").click(function () {
                let depositId = $(this).data("id");
                $.ajax({
                    url: "/admin/approve-deposit/" + depositId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + depositId).text("Approved");
                        alert("Deposit Approved!");
                    },
                    error: function () {
                        alert("Error approving deposit");
                    }
                });
            });

            // ✅ Reject Deposit AJAX
            $(".reject-deposit").click(function () {
                let depositId = $(this).data("id");
                $.ajax({
                    url: "/admin/reject-deposit/" + depositId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + depositId).text("Rejected");
                        alert("Deposit Rejected!");
                    },
                    error: function () {
                        alert("Error rejecting deposit");
                    }
                });
            });

            // ✅ Approve Withdrawal AJAX
            $(".approve-withdraw").click(function () {
                let withdrawId = $(this).data("id");
                $.ajax({
                    url: "/admin/approve-withdraw/" + withdrawId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + withdrawId).text("Approved");
                        alert("Withdrawal Approved!");
                    },
                    error: function () {
                        alert("Error approving withdrawal");
                    }
                });
            });

            // ✅ Reject Withdrawal AJAX
            $(".reject-withdraw").click(function () {
                let withdrawId = $(this).data("id");
                $.ajax({
                    url: "/admin/reject-withdraw/" + withdrawId,
                    type: "POST",
                    success: function (response) {
                        $(".status-" + withdrawId).text("Rejected");
                        alert("Withdrawal Rejected!");
                    },
                    error: function () {
                        alert("Error rejecting withdrawal");
                    }
                });
            });
        });
    </script>
<!-- Modal Overlay and Popup -->
<div id="adminModalOverlay" style="display:none;"></div>
<div id="adminModal" style="display:none;">
  <div class="admin-modal-header">
    <span id="adminModalTitle"></span>
    <span class="admin-modal-close" onclick="closeAdminModal()">&times;</span>
  </div>
  <div id="adminModalContent" class="admin-modal-content"></div>
</div>
<!-- Payment Method Modal -->
<div id="paymentModalOverlay" style="display:none;"></div>
<div id="paymentModal" style="display:none;">
  <div class="admin-modal-header">
    <span id="paymentModalTitle">Payment Method</span>
    <span class="admin-modal-close" onclick="closePaymentModal()">&times;</span>
  </div>
  <div id="paymentModalContent" class="admin-modal-content"></div>
</div>

<!-- Balance Edit Modal -->
<div id="balanceModalOverlay" style="display:none;"></div>
<div id="balanceModal" style="display:none;">
  <div class="admin-modal-header">
    <span id="balanceModalTitle">Edit User Balance</span>
    <span class="admin-modal-close" onclick="closeBalanceModal()">&times;</span>
  </div>
  <div id="balanceModalContent" class="admin-modal-content">
    <form id="balanceEditForm">
      <input type="hidden" id="balanceUserId" name="userId">
      <div class="form-group">
        <label for="balanceUserName">User:</label>
        <span id="balanceUserName" class="balance-user-name"></span>
      </div>
      <div class="form-group">
        <label for="currentBalance">Current Balance:</label>
        <span id="currentBalance" class="current-balance"></span>
      </div>
      <div class="form-group">
        <label for="balanceOperation">Operation:</label>
        <select id="balanceOperation" name="operation" required>
          <option value="add">Add Money</option>
          <option value="subtract">Subtract Money</option>
          <option value="set">Set Balance</option>
        </select>
      </div>
      <div class="form-group">
        <label for="balanceAmount">Amount:</label>
        <input type="number" id="balanceAmount" name="amount" min="1" step="1" required>
      </div>
      <div class="form-group">
        <label for="balanceReason">Reason:</label>
        <textarea id="balanceReason" name="reason" rows="3"></textarea>
      </div>
      <div class="form-actions">
        <button type="submit" class="balance-submit-btn">Update Balance</button>
        <button type="button" class="balance-cancel-btn" onclick="closeBalanceModal()">Cancel</button>
      </div>
    </form>
  </div>
</div>

<script>
function openPaymentModal(userId) {
  document.getElementById('paymentModalOverlay').style.display = 'block';
  document.getElementById('paymentModal').style.display = 'block';
  document.getElementById('paymentModalContent').innerHTML = '<div style="text-align:center;color:#888;">Loading...</div>';
  fetch('/admin/user-payment-method/' + userId)
    .then(res => res.json())
    .then(data => {
      if (!data.success) {
        document.getElementById('paymentModalContent').innerHTML = '<div style="color:#e53935;text-align:center;">No Payment Details Found</div>';
        return;
      }
      let html = `<div class='payment-modal-user'><b>${data.fullname}</b><br><span style='font-size:13px;color:#888;'>${data.mobile}</span></div>`;
      html += `<div class='payment-modal-table'>`;
      if (data.paymentMethod && data.paymentMethod.bankName) html += `<div><b>Bank Name:</b> <span>${data.paymentMethod.bankName}</span></div>`;
      if (data.paymentMethod && data.paymentMethod.accountNumber) html += `<div><b>Account No:</b> <span>${data.paymentMethod.accountNumber}</span> <span class='copy-icon' onclick='copyToClipboard(this, "${data.paymentMethod.accountNumber}")'>⧉</span><span class='copied-msg' style='display:none;'>Copied!</span></div>`;
      if (data.paymentMethod && data.paymentMethod.ifsc) html += `<div><b>IFSC:</b> <span>${data.paymentMethod.ifsc}</span> <span class='copy-icon' onclick='copyToClipboard(this, "${data.paymentMethod.ifsc}")'>⧉</span><span class='copied-msg' style='display:none;'>Copied!</span></div>`;
      if (data.paymentMethod && data.paymentMethod.upiId) html += `<div><b>UPI ID:</b> <span>${data.paymentMethod.upiId}</span> <span class='copy-icon' onclick='copyToClipboard(this, "${data.paymentMethod.upiId}")'>⧉</span><span class='copied-msg' style='display:none;'>Copied!</span></div>`;
      if (data.paymentMethod && data.paymentMethod.paytmNumber) html += `<div><b>Paytm Number:</b> <span>${data.paymentMethod.paytmNumber}</span> <span class='copy-icon' onclick='copyToClipboard(this, "${data.paymentMethod.paytmNumber}")'>⧉</span><span class='copied-msg' style='display:none;'>Copied!</span></div>`;
      
      // Check if no payment details exist
      if (!data.paymentMethod || 
          (!data.paymentMethod.bankName && 
           !data.paymentMethod.accountNumber && 
           !data.paymentMethod.ifsc && 
           !data.paymentMethod.upiId &&
           !data.paymentMethod.paytmNumber)) {
        html += `<div style="color:#888;text-align:center;margin-top:10px;">No Payment Details Added</div>`;
      }
      
      html += `</div>`;
      document.getElementById('paymentModalContent').innerHTML = html;
    })
    .catch((error) => {
      console.error("Error loading payment details:", error);
      document.getElementById('paymentModalContent').innerHTML = '<div style="color:#e53935;text-align:center;">Error loading payment details</div>';
    });
}
function closePaymentModal() {
  document.getElementById('paymentModalOverlay').style.display = 'none';
  document.getElementById('paymentModal').style.display = 'none';
}
document.getElementById('paymentModalOverlay').onclick = closePaymentModal;
// Notification Modal Logic
function toggleDepositNotifModal() {
  document.getElementById('depositNotifModal').classList.toggle('active');
}
function toggleWithdrawNotifModal() {
  document.getElementById('withdrawNotifModal').classList.toggle('active');
}
window.onclick = function(event) {
  if (!event.target.closest('.notification-section')) {
    document.getElementById('depositNotifModal').classList.remove('active');
    document.getElementById('withdrawNotifModal').classList.remove('active');
  }
}
// Filter/Sort Logic
let depositFilterParams = {};
let withdrawFilterParams = {}; // Added missing variable

function applyDepositFilter(e) {
  if (e) e.preventDefault();
  const form = document.getElementById('depositFilterBar');
  const fd = new FormData(form);
  depositFilterParams = {};
  for (let [k, v] of fd.entries()) {
    if (v) depositFilterParams[k] = v;
  }
  loadDepositTable();
}

function resetDepositFilter() {
  document.getElementById('depositFilterBar').reset();
  depositFilterParams = {};
  loadDepositTable();
}

function applyWithdrawFilter(e) {
  if (e) e.preventDefault();
  const form = document.getElementById('withdrawFilterBar');
  const fd = new FormData(form);
  withdrawFilterParams = {};
  for (let [k, v] of fd.entries()) {
    if (v) withdrawFilterParams[k] = v;
  }
  loadWithdrawTable();
}

function resetWithdrawFilter() {
  document.getElementById('withdrawFilterBar').reset();
  withdrawFilterParams = {};
  loadWithdrawTable();
}

document.getElementById('depositFilterBar').onsubmit = applyDepositFilter;
document.getElementById('withdrawFilterBar').onsubmit = applyWithdrawFilter;
// Deposit Table Data Load
let depositTableFirstLoad = true;
function loadDepositTable() {
  const tbody = document.getElementById('depositTableBody');
  if (depositTableFirstLoad) {
    tbody.innerHTML = '<tr><td colspan="8" style="text-align:center;color:#888;">Loading...</td></tr>';
  }
  let url = '/admin/all-deposits';
  if (Object.keys(depositFilterParams).length) {
    url += '?' + new URLSearchParams(depositFilterParams).toString();
  }
  fetch(url)
    .then(res => res.json())
    .then(data => {
      depositTableFirstLoad = false;
      // Notification badge & modal
      let newCount = 0;
      let notifList = '';
      let newDepositIds = [];
      if (data.deposits && data.deposits.length) {
        data.deposits.forEach(dep => {
          if (dep.isNew) {
            newCount++;
            notifList += `<div class='notification-user-row'><span>${dep.userId} (${dep.userMobile})<br><span style='font-size:12px;color:#888;'>₹${dep.amount} | ${new Date(dep.date).toLocaleString()}</span></span></div>`;
          }
          if (dep.status === 'Pending') newDepositIds.push(dep._id);
        });
      }
      // Toast for new deposit
      if (lastDepositIds.length && newDepositIds.length > lastDepositIds.length) {
        showAdminToast('New deposit request received!');
      }
      lastDepositIds = newDepositIds;
      document.getElementById('depositNotifBadge').style.display = newCount ? 'inline-block' : 'none';
      document.getElementById('depositNotifBadge').textContent = newCount;
      document.getElementById('depositNotifList').innerHTML = notifList || '<div style="color:#888;">No new deposits</div>';
      // Table
      if (!data.success || !data.deposits.length) {
        tbody.innerHTML = '<tr><td colspan="8" style="text-align:center;color:#888;">No Deposit Requests</td></tr>';
        return;
      }
      tbody.innerHTML = '';
      data.deposits.forEach(dep => {
        let rowClass = '';
        if (dep.status === 'Approved') rowClass = 'row-approved';
        else if (dep.status === 'Paid') rowClass = 'row-paid';
        else if (dep.status === 'Pending' || dep.status === 'Rejected') rowClass = 'row-rejected';
        tbody.innerHTML += `<tr class='${rowClass}'>
          <td style='text-align:center;'>${dep.userId} ${dep.isNew ? '<span class="new-user-badge">New</span>' : ''}</td>
          <td style='text-align:center;'>${dep.userMobile || '-'} </td>
          <td style='text-align:center;'>₹${dep.amount}</td>
          <td style='text-align:center;'>₹${dep.bonus}</td>
          <td style='text-align:center;'>${dep.transactionId||'-'}</td>
          <td style='text-align:center;'>${dep.screenshot ? `<a href='/uploads/${dep.screenshot}' target='_blank'>View</a>` : 'No Screenshot'}</td>
          <td style='font-weight:700;color:${dep.status==='Paid'?'#219653':dep.status==='Approved'?'#b59a00':'#e53935'};'>${dep.status}</td>
          <td style='text-align:center;'>
            ${dep.status === 'Pending' ? `
              <form action="/admin/approve-deposit/${dep._id}" method="POST" style="display:inline;">
                <button type="submit" class="approve-btn">Approve</button>
              </form>
              <form action="/admin/reject-deposit/${dep._id}" method="POST" style="display:inline;">
                <button type="submit" class="reject-btn">Reject</button>
              </form>
            ` : `<span class='action-disabled'>-</span>`}
          </td>
        </tr>`;
      });
    })
    .catch(() => {
      tbody.innerHTML = '<tr><td colspan="8" style="text-align:center;color:#e53935;">Error loading deposits</td></tr>';
    });
}

// Withdraw Table Data Load
let withdrawTableFirstLoad = true;
function loadWithdrawTable() {
  const tbody = document.getElementById('withdrawTableBody');
  if (withdrawTableFirstLoad) {
    tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;color:#888;">Loading...</td></tr>';
  }
  let url = '/admin/all-withdrawals';
  if (Object.keys(withdrawFilterParams).length) {
    url += '?' + new URLSearchParams(withdrawFilterParams).toString();
  }
  fetch(url)
    .then(res => res.json())
    .then(data => {
      withdrawTableFirstLoad = false;
      // Notification badge & modal
      let newCount = 0;
      let notifList = '';
      let newWithdrawIds = [];
      if (data.withdrawals && data.withdrawals.length) {
        data.withdrawals.forEach(wd => {
          if (wd.isNew) {
            newCount++;
            notifList += `<div class='notification-user-row'><span>${wd.userId} (${wd.userMobile})<br><span style='font-size:12px;color:#888;'>₹${wd.amount} | ${new Date(wd.date).toLocaleString()}</span></span></div>`;
          }
          if (wd.status === 'Pending') newWithdrawIds.push(wd._id);
        });
      }
      // Toast for new withdrawal
      if (lastWithdrawIds.length && newWithdrawIds.length > lastWithdrawIds.length) {
        showAdminToast('New withdrawal request received!');
      }
      lastWithdrawIds = newWithdrawIds;
      document.getElementById('withdrawNotifBadge').style.display = newCount ? 'inline-block' : 'none';
      document.getElementById('withdrawNotifBadge').textContent = newCount;
      document.getElementById('withdrawNotifList').innerHTML = notifList || '<div style="color:#888;">No new withdrawals</div>';
      // Table
      if (!data.success || !data.withdrawals.length) {
        tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;color:#888;">No Withdrawal Requests</td></tr>';
        return;
      }
      tbody.innerHTML = '';
      data.withdrawals.forEach(wd => {
        let rowClass = '';
        if (wd.status === 'Paid') rowClass = 'row-paid';
        else if (wd.status === 'Approved') rowClass = 'row-approved';
        else if (wd.status === 'Pending' || wd.status === 'Rejected') rowClass = 'row-rejected';
        
        // Generate payment method cell content
        const paymentMethodCell = generatePaymentMethodCell(wd.paymentMethod, wd.paymentDetails);
        
        tbody.innerHTML += `<tr class='${rowClass}'>
          <td style='text-align:center;'>${wd.userId} ${wd.isNew ? '<span class="new-user-badge">New</span>' : ''}</td>
          <td style='text-align:center;'>${wd.userMobile || '-'} </td>
          <td style='text-align:center;'>₹${wd.amount}</td>
          <td class="payment-method-cell">${paymentMethodCell}</td>
          <td style='font-weight:700;color:${wd.status==='Paid'?'#219653':wd.status==='Approved'?'#b59a00':'#e53935'};'>${wd.status}</td>
          <td style='text-align:center;'>
            ${wd.status === 'Pending' ? `
              <form action="/admin/approve-withdraw/${wd._id}" method="POST" style="display:inline;">
                <button type="submit" class="approve-btn">Approve</button>
              </form>
              <form action="/admin/reject-withdraw/${wd._id}" method="POST" style="display:inline;">
                <button type="submit" class="reject-btn">Reject</button>
              </form>
              <a href='/admin/mark-withdraw-paid/${wd._id}' class='paid-btn'>Paid</a>
            ` : `<span class='action-disabled'>-</span>`}
          </td>
        </tr>`;
      });
      
      // Add event listeners for payment method dropdowns AFTER DOM is updated
      setTimeout(() => {
        document.querySelectorAll('.payment-method-summary').forEach(el => {
          if (el) {
            el.onclick = togglePaymentDetails;
          }
        });
      }, 100);
    })
    .catch(() => {
      tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;color:#e53935;">Error loading withdrawals</td></tr>';
    });
}

// Generate payment method cell content
function generatePaymentMethodCell(type, details) {
  if (!type || !details) {
    return '<div>No payment details</div>';
  }
  
  let displayValue = '';
  let detailsHtml = '';
  
  if (type === 'bank') {
    // For bank, show a summary with dropdown
    displayValue = details.bankName || 'Bank Account';
    detailsHtml = `
      <div class="payment-detail-row">
        <span class="payment-detail-label">Bank Name:</span>
        <span class="payment-detail-value">${details.bankName || '-'}</span>
        <button class="copy-btn" onclick="copyText('${details.bankName || ''}', this)">📋</button>
      </div>
      <div class="payment-detail-row">
        <span class="payment-detail-label">Account No:</span>
        <span class="payment-detail-value">${details.accountNumber || '-'}</span>
        <button class="copy-btn" onclick="copyText('${details.accountNumber || ''}', this)">📋</button>
      </div>
      <div class="payment-detail-row">
        <span class="payment-detail-label">IFSC:</span>
        <span class="payment-detail-value">${details.ifsc || '-'}</span>
        <button class="copy-btn" onclick="copyText('${details.ifsc || ''}', this)">📋</button>
      </div>
    `;
  } else if (type === 'upi') {
    // For UPI, show the UPI ID directly
    displayValue = details.upiId || 'UPI';
    detailsHtml = `
      <div class="payment-detail-row">
        <span class="payment-detail-label">UPI ID:</span>
        <span class="payment-detail-value">${details.upiId || '-'}</span>
        <button class="copy-btn" onclick="copyText('${details.upiId || ''}', this)">📋</button>
      </div>
    `;
  } else if (type === 'paytm') {
    // For Paytm, show the number directly
    displayValue = details.paytmNumber || 'Paytm';
    detailsHtml = `
      <div class="payment-detail-row">
        <span class="payment-detail-label">Paytm Number:</span>
        <span class="payment-detail-value">${details.paytmNumber || '-'}</span>
        <button class="copy-btn" onclick="copyText('${details.paytmNumber || ''}', this)">📋</button>
      </div>
    `;
  }
  
  // Create HTML for payment method cell
  return `
    <div class="payment-method-summary">
      <span class="payment-method-type">${type.toUpperCase()}:</span>
      <span class="payment-method-value">${displayValue}</span>
      <span class="payment-method-dropdown">▼</span>
    </div>
    <div class="payment-method-details">
      ${detailsHtml}
    </div>
  `;
}

// Toggle payment details visibility
function togglePaymentDetails(e) {
  if (!e || !this) return; // Guard against null/undefined
  
  e.stopPropagation();
  const cell = this.closest('.payment-method-cell');
  if (!cell) return; // Guard against null element
  
  const details = cell.querySelector('.payment-method-details');
  if (!details) return; // Guard against null element
  
  // Close all other open details
  document.querySelectorAll('.payment-method-details').forEach(el => {
    if (el !== details) {
      el.style.display = 'none';
    }
  });
  
  // Toggle this details
  details.style.display = details.style.display === 'block' ? 'none' : 'block';
}

// Copy text to clipboard
function copyText(text, button) {
  if (!button) return; // Guard against null element
  
  navigator.clipboard.writeText(text || '');
  
  // Show copied feedback
  const originalText = button.textContent;
  button.textContent = '✓';
  button.style.color = 'green';
  
  setTimeout(() => {
    button.textContent = originalText;
    button.style.color = '';
  }, 1500);
}
</script>
<!-- Page load par data fetch karo -->
<script>
window.addEventListener('DOMContentLoaded', function() {
  loadDepositTable();
  loadWithdrawTable();
  // Real-time auto-refresh every 5 seconds
  setInterval(function() {
    loadDepositTable();
    loadWithdrawTable();
  }, 5000);
  // Close payment details when clicking outside
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.payment-method-cell')) {
      document.querySelectorAll('.payment-method-details').forEach(el => {
        el.style.display = 'none';
      });
    }
  });
});
</script>

<!-- Toast notification bar -->
<div id="adminToast" style="display:none;position:fixed;top:20px;right:30px;z-index:9999;min-width:220px;padding:14px 24px;background:#27ae60;color:#fff;border-radius:8px;font-size:16px;box-shadow:0 4px 16px rgba(0,0,0,0.18);font-weight:600;opacity:0.95;transition:all 0.3s;">
  <span id="adminToastMsg"></span>
</div>

<script>
let lastDepositIds = [];
let lastWithdrawIds = [];
function showAdminToast(msg) {
  var toast = document.getElementById('adminToast');
  document.getElementById('adminToastMsg').textContent = msg;
  toast.style.display = 'block';
  toast.style.opacity = 0.95;
  setTimeout(function() {
    toast.style.opacity = 0;
    setTimeout(function() { toast.style.display = 'none'; }, 400);
  }, 5000);
}
</script>
</body>
</html>
